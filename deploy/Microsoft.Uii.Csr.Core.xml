<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Uii.Csr.Core</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Uii.Csr.AdapterProcessChanged">
            <summary>
            This abstract class is used by UII developer's to create external adapters.
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.ApplicationAdapter">
            <summary>
            Summary description for ApplicationAdapter.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ApplicationAdapter.Process">
            <summary>
            If not null, this is the external process which UII is controlling to some extent.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ApplicationAdapter.MainWindowHandle">
            <summary>
            Designated MainWindowHandle for integration purposes, may not be the same as Process.MainWindowHandle
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.ApplicationAdapter.AdapterProcessChangedEvent">
            <summary>
            An event telling UII that the process has been changed, for instance,
            a new one was spawned.  This can be used within custom adapters to notify
            UII of changes.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationAdapter.AdapterProcessChange(System.Diagnostics.Process)">
            <summary>
            Used by inherited classes to send process change event to UII.
            </summary>
            <param name="changedProcess">The changedProcess that has changed.</param>
        </member>
        <member name="T:Microsoft.Uii.Csr.AdapterContextChanged">
            <summary>
            This abstract class used by UII as the generalized base class for other adapters.
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.AdapterFireRequestAction">
            <summary>
            A request to fire an action.  Not used by all adapters.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:Microsoft.Uii.Csr.AdapterRequestAction">
            <summary>
            A request to fire an action.  Not used by all adapters.
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.HostedApplicationAdapter">
            <summary>
            This a abstract class used by UII developer's to create custom adapters for
            external applications.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedApplicationAdapter.Name">
            <summary>
            Name of the application this adapter is working with.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedApplicationAdapter.ApplicationInitString">
            <summary>
            XML string from the database used to initialize the application.
            Useful for any settings it may have since the developer can add new ones
            which UII will ignore but that the adapter may need to use.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedApplicationAdapter.SessionID">
            <summary>
            Id of the current session. Useful with global applications
            to track which session is active.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedApplicationAdapter.DdaApplicationObject">
            <summary>
            Application object DDAs use to manipulate the application
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedApplicationAdapter.SessionWorkItem">
            <summary>
            CAB work item serving to identify the session
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.HostedApplicationAdapter.AdapterContextChangedEvent">
            <summary>
            An event letting the adapter change the context.
            This can be used within custom adapters to notify UII of changes.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.HostedApplicationAdapter.AdapterFireRequestActionEvent">
            <summary>
            An event letting the adapter request that an action be fired.
            This can be used within custom adapters to send UII actions.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplicationAdapter.AdapterContextChange(Microsoft.Uii.Csr.Context)">
            <summary>
            Used by inherited classes to send context change event to UII.
            </summary>
            <param name="context">The context object that has changed.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplicationAdapter.AdapterFireRequestAction(Microsoft.Uii.Csr.RequestActionEventArgs)">
            <summary>
            Used by inherited classes to request an action through UII to other applications.
            </summary>
            <param name="args">Action event arguments</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplicationAdapter.Close">
            <summary>
            Called when the application this is working with is being closed by
            the UII application host.  This may not run if the application closes
            itself.
            </summary>
            <returns>true</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplicationAdapter.DoAction(Microsoft.Uii.Csr.Action,Microsoft.Uii.Csr.RequestActionEventArgs)">
            <summary>
            Called by UII whenever an action is about to be performed on the application.
            </summary>
            <param name="action">The action class containing the information about what action to fire.</param>
            <param name="args">The event arguments for request action event</param>
            <returns>True to accept the change, false to not process any further</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplicationAdapter.Initialize">
            <summary>
            Run by the Hosting application when the app's Initialize() is called.
            </summary>
            <returns>true</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplicationAdapter.GetStateData(System.String@)">
            <summary>
            Called when UII is saving a UII agent's state.
            </summary>
            <param name="state">XML string representing current state of the app</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplicationAdapter.NotifyContextChange(Microsoft.Uii.Csr.Context)">
            <summary>
            Event which happens whenever the context is changed.
            </summary>
            <param name="context">Context data</param>
            <returns>true to accept the change, false to not process any further</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplicationAdapter.SessionChange(System.Boolean,System.String@)">
            <summary>
            Called by UII whenever the session changes.  Only happens for applications
            which are global applications.
            </summary>
            <param name="activate">true if session is being activated,
             false if another session is being activated</param>
            <param name="stateXml">state information - can be changed</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplicationAdapter.SetStateData(System.String@)">
            <summary>
            Called when UII is restoring a UII agent's state.
            </summary>
            <param name="state">XML string representing current state of the app</param>
        </member>
        <member name="E:Microsoft.Uii.Csr.HostedApplicationAdapter.AdapterRequestActionEvent">
            <summary>
            An event letting the adapter request that an action be fired.
            This can be used within custom adapters to send UII actions.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplicationAdapter.AdapterFireAction(System.String,System.String,System.String)">
            <summary>
            Used by inherited classes to request an action through UII to other applications.
            </summary>
            <param name="applicationName">The target application</param>
            <param name="actionName">Name of the Action</param>
            <param name="data">Data</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplicationAdapter.DoAction(Microsoft.Uii.Csr.Action,System.String@)">
            <summary>
            Called by UII whenever an action is about to be performed on the application.
            </summary>
            <param name="action">Action</param>
            <param name="data">Action data</param>
            <returns>true to accept the change, false to not process any further</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplicationAdapter.NotifyContextChange(System.String)">
            <summary>
            Event which happens whenever the context is changed.
            </summary>
            <param name="context">Context</param>
            <returns>true to accept the change, false to not process any further</returns>
        </member>
        <member name="T:Microsoft.Uii.Csr.WebApplicationAdapter">
            <summary>
            This abstract class is used by UII developer's to create web based adapters.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.WebApplicationAdapter.Browser">
            <summary>
            Browser control containing the web page(s).
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.WebApplicationAdapter.EmptyQueryStringData">
            <summary>
            To store the flag which turns on/off visibility of data specified by System Integrator.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.WebApplicationAdapter.EncodeQueryStringData">
            <summary>
            To store the flag which turns on encoding of data.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.WebApplicationAdapter.DoAction(Microsoft.Uii.Csr.HostedWebApplication.WebAction,System.String@)">
            <summary>
            Called by UII whenever an action is about to be performed on the web application.
            </summary>
            <param name="action">Action</param>
            <param name="data">Data</param>
            <returns>true to accept the change, false to not process any further</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.WebApplicationAdapter.BeforeNavigate(System.String@,System.String@,System.String@,System.Int32@,System.String@,System.String@,System.Object@)">
            <summary>
            Called by UII whenever the hosted web app navigates to a new page.
            The app, action, and data arguments can all be modified.
            </summary>
            <param name="app">target (if any) of an action</param>
            <param name="action">action (if any) to be performed</param>
            <param name="data">data (if any) to use with an action</param>
            <param name="flags">Flags</param>
            <param name="headers">Header</param>
            <param name="url">url</param>
            <param name="postData">Post Data</param>
            <returns>Return true to accept the navigate, false to block it</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.WebApplicationAdapter.NavigateComplete(System.String)">
            <summary>
            Called when a navigation for this.browser is completed.
            </summary>
            <param name="urlString">The URL the browser just loaded.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.WebApplicationAdapter.DocumentComplete(System.String)">
            <summary>
            Called when the document being loaded is completed.
            </summary>
            <param name="urlString">The URL of the document being loaded.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.WebApplicationAdapter.OnNewWindow(System.String,System.String,System.Int64)">
            <summary>
            This is a request to create a new browser window.  It permits the
            application to cancel or permit the NewWindow operation.
            </summary>
            <param name="newUrlString">The new window's initial address.</param>
            <param name="fromUrlString">The URL which is trying to create a new window.</param>
            <param name="flags">A bitmask indicating how and why this window is being created.</param>
            <returns>True to allow NewWindow, false to cancel.</returns>
        </member>
        <member name="T:Microsoft.Uii.Csr.ApplicationHost">
            <summary>
            This class hosts the applications, regardless of type, held by a session.
            </summary>
            <remarks>
            One ApplicationHost exists for each session.
            </remarks>
        </member>
        <member name="F:Microsoft.Uii.Csr.ApplicationHost._WarnedAboutHostedAppUnavailability">
            <summary>
            Remember whether the agent had been warned about unavailability of hosted applications.
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.ApplicationHost._EmptyContextObject">
            <summary>
            Empty context reference.
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.ApplicationHost._ApplicationHostId">
            <summary>
            Application Host's unique ID
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.ApplicationHost.allGlobalAppsLoaded">
            <summary>
             Required to know if all the global applications are loaded or not.
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.ApplicationHost.globalHostedApps">
            <summary>
            Global applications are those apps that exists throughout the use of UII
              and not just during the existance of a session.
            Setting to an empty array so that the enumeration always succeeds
              rather than a foreach loop throwing an exception.
            </summary>
            <remarks>
            Prior to CCF 1.02, all apps were effectively globals.
            </remarks>
        </member>
        <member name="F:Microsoft.Uii.Csr.ApplicationHost.allGlobalApps">
            <summary>
            Contains all the global applications (both tagged and untagged)
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.ApplicationHost.taggedGlobalApps">
            <summary>
            Contains only the tagged global applications
            </summary> 
        </member>
        <member name="F:Microsoft.Uii.Csr.ApplicationHost.untaggedNonGlobalApps">
            <summary>
            Contains only the untagged non-global applications
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.ApplicationHost.initializedApps">
            <summary>
            Workflow Driven Implementation:
            Contains the initialized global applications.
            Useful to eliminate initializing applications multiple times.
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.ApplicationHost.initializedNonGlobalApps">
            <summary>
            Contains the initialized non-global applications
            Useful to eliminate initialing applications multiple times.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ApplicationHost.globalAppHost">
            <summary>
            Remember if it is associated with global session.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ApplicationHost.contextObjectFilled">
            <summary>
            Tracks whether the context if filled or not.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ApplicationHost.contextObjectCache">
            <summary>
            Cached context string and app state
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.ApplicationHost.hostedApps">
            <summary>
            The array of Hosted applications.
            </summary>
            <remarks>
            v1.02 changed from setting to null to setting to an empty array so that the
            enumeration always succeeds rather than a foreach loop throwing an exception.
            </remarks>
        </member>
        <member name="P:Microsoft.Uii.Csr.ApplicationHost.AppRecords">
            <summary>
            These are the raw application definitions as returned from the web service.
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.ApplicationHost.configurationReader">
            <summary>
            configurationReader is used to retrieve the app settings from the configuration/server
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.ApplicationHost.workItem">
            <summary>
            ApplicationHost workItem
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.ApplicationHost.sessionId">
            <summary>
            sessionid
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.ApplicationHost.globalWorkItem">
            <summary>
            The workItem related to the global AppHost
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.ApplicationHost.RequestFocusEventHandler">
            <summary>
            Delegate to handle requests to drive focus to a specific application.
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.ApplicationHost.RequestActionStatusHandler">
            <summary>
            Delegate for event handler for the status of the Request Action
            specifically used for Winform application
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.ApplicationHost.RequestApplicationCreationHandler">
            <summary>
            Delegate for requesting a new application to be created and hosted within UII.
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.ApplicationHost.RequestBeforeApplicationCreationHandler">
            <summary>
            Delegate for requesting a new application to be created and hosted within UII.
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.ApplicationHost.RequestApplicationCloseHandler">
            <summary>
            Delegate for informing others that an application is being closed.
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.ApplicationHost.IsolatedFormSelectedEventHandler">
            <summary>
            The delegate for informing others that an isolated application is brought to focus.
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.ApplicationHost.CurrentContextChangeEventHandler">
            <summary>
            The delegate for informing others that the context has been changed by some application.
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.ApplicationHost.RequestApplicationAdditionFromAutomationHandler">
            <summary>
            The delegate for requesting a new application to be added to the application host
            </summary>
            <param name="appRecord"></param>
        </member>
        <member name="T:Microsoft.Uii.Csr.ApplicationHost.RequestApplicationCreationFromAutomationHandler">
            <summary>
            Delegate for requesting a new application to be created and hosted within UII.
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.ApplicationHost.RequestApplicationCloseFromAutomationHandler">
            <summary>
            Delegate for requesting a new application to be created and hosted within UII.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.ApplicationHost.ActionCompleted">
            <summary>
            Event used to indicate an action is complete.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.ApplicationHost.RequestFocus">
            <summary>
            Event thrown to request the focus to a specific application.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.ApplicationHost.RequestActionStatus">
            <summary>
            Event for the status of the Request Action
            specifically used for Winform application.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.ApplicationHost.RequestApplicationCreation">
            <summary>
            Event called when requesting a new application to be created and hosted within UII.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.ApplicationHost.RequestBeforeApplicationCreation">
            <summary>
            Event called when requesting a new application to be created and hosted within UII.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.ApplicationHost.RequestApplicationClose">
            <summary>
            Event called to inform others that an application is closing.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.ApplicationHost.IsolatedFormSelected">
            <summary>
            The event to be raised in the event handler for the FormSelected event from 
            IHostedAppUICommand interface of the isolated applications. This will be handled 
            in the Desktop class to update the other user controls.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.ApplicationHost.SessionOpened">
            <summary>
            The event raised when a session is opened.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.ApplicationHost.SessionClosed">
            <summary>
            The event raised when a session is closed.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.ApplicationHost.SessionChanged">
            <summary>
            The event raised when a session is changed.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.ApplicationHost.CurrentContextChange">
            <summary>
            The event raised when context information is changed by some application.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.ApplicationHost.RequestDefaultAction">
            <summary>
            Event is raised on default action
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.ApplicationHost.RequestApplicationCreationFromAutomation">
            <summary>
            Event called when requesting a new application to be created by an automation and hosted within UII.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.ApplicationHost.RequestApplicationAdditionFromAutomation">
            <summary>
            Occurs when [request application addition from automation].
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.ApplicationHost.RequestApplicationCloseFromAutomation">
            <summary>
            Event called when requesting hosted within the UI to be closed by an automation.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ApplicationHost.ApplicationHostID">
            <summary>
            Gets the Application Host's unique ID.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ApplicationHost.ContextID">
            <summary>
            Set or get the ID of the context
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ApplicationHost.contextObject">
            <summary>
            Used to hide the reading/writing of the context to the web services.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ApplicationHost.IsSynchronized">
            <summary>
            Gets whether the application is synchronized.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ApplicationHost.Count">
            <summary>
            Gets the count of the hosted applcations.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ApplicationHost.SyncRoot">
            <summary>
            Gets the sync root object.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ApplicationHost.Item(System.Int32)">
            <summary>
            Allow AppHost objects to be indexed and return IHostedApplication objects.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.#ctor(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Constructor for the ApplicationHost class.
            </summary>
            <param name="sessionID">The ID of the session this ApplicationHost is associated with</param>
            <param name="globalSession">Indicates if this ApplicationHost is associated with a global session</param>
            <param name="useContextProxy">true to activate calls to the context web service to persist context changes</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.#ctor(System.Guid,System.Boolean)">
            <summary>
            Constructor for the ApplicationHost class.
            </summary>
            <param name="sessionID">The ID of the session this ApplicationHost is associated with</param>
            <param name="globalSession">Indicates if this ApplicationHost is associated with a global session</param>
        </member>
        <member name="F:Microsoft.Uii.Csr.ApplicationHost.canCloseDynamicApplications">
            <summary>
            Dynamic apps in this list can be closed dynamically (either by code or by UI)
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.ApplicationHost.globalDynamicApplications">
            <summary>
            Contains the global dynamic applications
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.ApplicationHost.nonGlobalDynamicApplications">
            <summary>
            Contains the non-global dynamic applications
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.ApplicationHost.hiddenGlobalDynamicApps">
            <summary>
            Contains global dynamic apps that are currently hidden
            (e.g. its running but hidden from UI).
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.CanCloseDynamicApplication(Microsoft.Uii.Csr.IHostedApplication)">
            <summary>
            Check if the dynamic application can be closed dynamically (either via code or UI).
            </summary>
            <param name="application">The name of the application</param>
            <returns>True if the dynamic application can be closed dynamically, 
            false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.IsNonGlobalDynamicApplication(Microsoft.Uii.Csr.IHostedApplication)">
            <summary>
            Check if the dynamic application is non-global
            </summary>
            <param name="application">The application to check</param>
            <returns>True if its a non-global dynamic application, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.IsGlobalDynamicApplication(Microsoft.Uii.Csr.IHostedApplication)">
            <summary>
            Check if the dynamic application is global.
            </summary>
            <param name="application">The application to check</param>
            <returns>True if the application is a global dynamic application, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.IsDynamicApplication(Microsoft.Uii.Csr.IHostedApplication)">
            <summary>
            Check if the hosted application is dynamic.
            </summary>
            <param name="application"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.IsHiddenGlobalDynamicApp(Microsoft.Uii.Csr.IHostedApplication)">
            <summary>
            Check if the dynamic global application is hidden.
            </summary>
            <param name="application">Application to check</param>
            <returns>true if the application is hidden, global and dynamic</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.FindAppInList(System.Collections.IList,Microsoft.Uii.Csr.IHostedApplication)">
            <summary>
            Generic helper method to find a hosted application in a list.
            </summary>
            <param name="list">List of hosted applications</param>
            <param name="application">The application to find</param>
            <returns>True if found, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.GetDynamicApplicationNames(System.Boolean)">
            <summary>
            Return the names of all the global or non-global applications that
            are configured via the CRM admin page to show in UI menu.
            </summary>
            <remarks>
            Some dynamic applications are configure via the CRM admin page to show
            in UI menu, therefore are able to be loaded/unloaded via the UI.  Others
            can be configure not to show in UI menu, therefore are only loaded/unloaded
            in code by an SI.
            </remarks>
            <param name="global">True if want a list of global dynamic apps,
            false if want a list of non-global dynamic apps</param>
            <returns>ArrayList of dynamic applications, null if none is found</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.LoadDynamicApplication(System.String)">
            <summary>
            Load the dynamic hosted application.
            </summary>
            <param name="applicationName">The name of the application to load</param>
            <returns>True if application is loaded successfully or has already been loaded,
            false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.LoadDynamicApplication(System.String,System.Boolean)">
            <summary>
            Load the dynamic hosted application
            </summary>
            <param name="applicationName">Name of the dynamic application to load</param>
            <param name="canClose">True if this application can be closed dynamically.</param>
            <returns>True if application is loaded successfully or has already been loaded,
            false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.LoadDynamicApplication(Microsoft.Uii.Common.Entities.ApplicationRecord,System.Boolean)">
            <summary>
            Load the dynamic application from the record
            </summary>
            <param name="record">Application to load</param>
            <param name="canClose">true if user can close the application</param>
            <returns>Created IHostedApplication object</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.UnloadDynamicApplication(Microsoft.Uii.Csr.IHostedApplication)">
            <summary>
            Unload the dynamic hosted application.  Dynamic application that are global 
            will not actually be unloaded but hidden until next request to load.
            </summary>
            <param name="application">Name of dynamic application to unload</param>
            <returns>True if the dynamic application is found and unloaded</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.InitializeApplications(Microsoft.Uii.Csr.IHostedApplication)">
            <summary>
            Initialize a single hosted application.
            </summary>
            <param name="app">Application to be initialized</param>
            <returns>Status of initialization process.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.ExecuteDefaultActions(Microsoft.Uii.Csr.IHostedApplication)">
            <summary>
            Execute the default action on a single application.
            </summary>
            <param name="app">The application to execute</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.NotifyContextChange(Microsoft.Uii.Csr.IHostedApplication)">
            <summary>
            Notify a single hosted app of the context change.
            </summary>
            <param name="app">The application to notify</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.GetDynamicApplication(System.String)">
            <summary>
            Get a specific dynamic app identified by the name passed in.
            </summary>
            <param name="applicationName">Name of the application to get</param>
            <returns>Application or null if none is found</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.GetDynamicApplicationRecord(System.String)">
            <summary>
            Get the application record for a dynamic application from
            the name passed in.
            </summary>
            <param name="applicationName">The name of the application</param>
            <returns>Application Record data</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.GetDynamicApplicationRecord(System.Guid)">
            <summary>
            Get the application record for a dynamic application from
            the name passed in.
            </summary>
            <param name="applicationID">The ID of the application</param>
            <returns>Application Record data</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.IsDynamicApplication(Microsoft.Uii.Common.Entities.ApplicationRecord)">
            <summary>
            Check if the application is a dynamic application by checking
            the initialization string.
            </summary>
            <param name="appRecord">The application record to check</param>
            <returns>True if application is dynamic, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.IsTaggedApplication(Microsoft.Uii.Common.Entities.ApplicationRecord)">
            <summary>
            Check if the application is a workflow dependant application by checking
            the initialization string.
            </summary>
            <param name="appRecord">The application record to check</param>
            <returns>True if application is workflow dependant, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.LoadApplications(System.Collections.ArrayList,System.Boolean,System.Boolean)">
            <summary>
            Workflow Driven Implementation:
            Dynamically load/unload hosted applications depending on the status of workflows.
            </summary>
            <param name="appsInWorkflow">The ID's of the applications required by active workflow</param>
            <param name="loadOnlyGlobal">True if only the global applications are to be loaded</param>
            <param name="workflowExists">True if a workflow engine (mechanism/UI that manages the series workflow steps) exists</param>
            <returns>True if applications loaded successfully</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.IsTaggedApplication(Microsoft.Uii.Csr.IHostedApplication)">
            <summary>
            Check if the given application is a tagged (global or non-global) application
            </summary>
            <param name="hostedApp">Hosted application to check</param>
            <returns>Tagged or not</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.IsTaggedNonGlobalApplication(Microsoft.Uii.Csr.IHostedApplication)">
            <summary>
            Workflow Driven Implementation:
            Checks if the given application is a tagged non-global application.
            </summary>
            <param name="hostedApp">Hosted application to check</param>
            <returns>Tagged non-global or not</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.IsTaggedNonGlobalApplication(System.Guid)">
            <summary>
            Workflow Driven Implementation:
            Checks if the application with the given ApplicationID is a tagged non-global application.
            </summary>
            <param name="appID">ApplicationID of the application to check</param>
            <returns>Tagged Non-Global or not</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.IsTaggedGlobalApplication(Microsoft.Uii.Csr.IHostedApplication)">
            <summary>
            Workflow Driven Implementation:
            Checks if the given application is tagged global application.
            </summary>
            <param name="hostedApp">Hosted application to check</param>
            <returns>Tagged or not</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.IsTaggedGlobalApplication(System.Guid)">
            <summary>
            Workflow Driven Implementation:
            Checks if the application with the given ApplicationID is tagged global application.
            </summary>
            <param name="appID">ApplicationID of the application to check</param>
            <returns>Tagged or not</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.RequiresApplicationsReload(System.Collections.ArrayList)">
            <summary>
            Workflow Driven Implementation:
            Checks if all the apps required by the 
            workflow are already loaded and visible and there are no additional apps
            required; or any app is available which is not required by this
            workflow.
            </summary>
            <param name="appsInWorkflow">Applications requried by the workflow</param>
            <returns>True if application host should be invalidated, False otherwise.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.CreateContext">
            <summary>
            Creates a default context.
            </summary>
            <returns>Unique ID (Guid) to the context</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.CreateContext(Microsoft.Uii.Csr.Context)">
            <summary>
            Creates a new copy of the context
            </summary>
            <param name="context">Context to create on server.</param>
            <returns>Unique ID (Guid) to the context</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.SetContext(Microsoft.Uii.Csr.Context)">
            <summary>
            Modifies an existing copy of the context.
            </summary>
            <param name="context">Context</param>
            <returns>Context ID GUID</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.GetContext">
            <summary>
            Returns the context string.
            </summary>
            <returns>Context object</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.ClearContext">
            <summary>
            Tells all applications to clear their local copy of the context.  Does not
            send the context to the backend systems.  This is originally for
            closing context on application sessions which have ended.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.InitializeApplications">
            <summary>
            Calls each hosted application's Initialize() method.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.Close">
            <summary>
            Close only the non-global applications. The global applications should be available always
            regardless of existance of a active workflow or a session.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.SessionChange(System.Boolean,System.Guid)">
            <summary>
            Handles changing sessions
            </summary>
            <param name="active">Should event handlers of the current session be redirected before
            notifying the applications of the session change.  This is useful in
            case the SessionChange notification is used to kick off some
            actions to other apps in the same session.</param>
            <param name="sessionID">Session ID that is changing.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.NotifyContextChange">
            <summary>
            Notify all the apps of the current context.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.NotifyContextChange(System.Boolean)">
            <summary>
            Notify all the apps of the current context.
            </summary>
            <param name="taggedApplicationsOnly">
            True -	Only tagged global and tagged non-global applications should be updated with the latest context.
            		This case occurs when a workflow had been just started. When a workflow is started, We freshly 
            		load the tagged non-global apps so they require the context. And we make the required tagged
            		global applications visible so they should also receive the latest context. But as untagged apps
            		have already received the context when the session is started, they need not be updated again.
            False - All global (untagged and tagged) apps and untagged non-global apps should be updated with 
            		the changed context.
            		This case occurs in two situations. 
            		1. When session is started.
            			- At this point, the untagged global apps should get the context. As hostedApps contains only 
            			the untagged global apps now, instruction to inform all global apps will not have any effect on 
            			tagged global apps (tagged global apps will be active only when a workflow is started but not 
            			immediately after session is started and so they should not be informed about context change when 
            			session is started but they should be updated only when a workflow is started).
            		2. Session changed (switching between session)
            			- At this point, all global apps should receive the changed context. Now
            			hostedApps contains all types (all global and non-global). Among them only the global apps and untagged non-global
            			should be updated with the context.
            </param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.IsNavigationComplete">
            <summary>
            Returns if any hosted application is currently navigating to another page.
            </summary>
            <returns>Navigation completed or not</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.ExecuteDefaultActions">
            <summary>
            Workflow Driven Implementation:
            Executes the default actions on all the hosted applications.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.ExecuteDefaultActions(System.Boolean)">
            <summary>
            Workflow Driven Implementation:
            Runs the default action for every application in this session.
            </summary>
            <param name="taggedApplicationsOnly">
            True -	Execute default action on only the tagged global apps and tagged non-global apps.
            		This case occurs when a workflow is started. When a workflow is started, the 
            		tagged non-global apps will be freshly loaded so they should execute their defaut actions. 
            		In case of tagged global apps, they should execute the default action only once
            		in their life time. But if they remained hidden (and so no action will be performed 
            		on them) till now and coming to visible state first time, then they should execute 
            		their default action.
            False - Execute default action on all kinds of applications.
            		This happens while any session is being created. Then hostedApps will have only
            		the untagged global and untagged non-global applications. As the global applications 
            		should execute their default action only once in their lifetime, we let it happen 
            		when this app host is associated with global session and we avoid it for non-global 
            		sessions.
            </param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.IsGlobalApplication(Microsoft.Uii.Csr.IHostedApplication)">
            <summary>
            Checks if an application is global or not.  This really should be
            part of IHostedApplication but changing it now would break some
            existing applications.
            </summary>
            <param name="app">The Application record from the web service.</param>
            <returns>true if a global app, false if not</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.IsGlobalApplication(System.Guid)">
            <summary>
            Checks if an application is global or not.
            </summary>
            <param name="applicationID">The ID of the applcation to check.</param>
            <returns>Boolean indicating if the application is global.</returns>
            <remarks>
            This really should be part of IHostedApplication but changing it now would break some
            existing applications.
            </remarks>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.HandleActionCompletedEvent(System.Object,Microsoft.Uii.Csr.ActionEventArgs)">
            <summary>
            This is for internal UII use only.  Please do not use directly.  Public visibility necessary for CAB integration.
            </summary>
            <param name="sender">The hosted application that has raised the event.</param>
            <param name="args">RequestActionEventArgs arguments.  Refer to RequestActionEventArgs in the HostedAplication.cs for more details</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.HandleRequestActionStatusEvent(System.Object,Microsoft.Uii.Csr.RequestActionEventArgs)">
            <summary>
            Event handler for status of the requested action
            This is for internal UII use only.  Please do not use directly.  Public visibility necessary for CAB integration.
            </summary>
            <param name="sender">Event Sender</param>
            <param name="args">Event argument for request action event</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.GetApplication(System.Guid)">
            <summary>
            Given an application ID, returns its instance or null.
            </summary>
            <param name="applicationID">Application ID</param>
            <returns>An IHostedApplication or null</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.GetApplication(System.String)">
            <summary>
            Given an application name, returns its instance or null.
            </summary>
            <param name="applicationName">Application Name</param>
            <returns>An IHostedApplication or null</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.GetApplications">
            <summary>
            Returns the contained set of hosted applications.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.GetApplicationInitializationXml(System.Guid)">
            <summary>
            Returns the XML initialization string used for a given application.
            </summary>
            <param name="applicationID">The ID for the application</param>
            <returns>An XML string or null for an error</returns>
            <remarks>
            This really should've been done as part of IHostedApplication
            or a later interface for each application, however doing so now would
            break existing code.
            </remarks>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.CopyTo(System.Array,System.Int32)">
            <summary>
            This Method is used to copy all the elements of the current one dimensional System.Array to 
            specified one dimensional System.Array starting at the specified destination System.Array Index 
            </summary>
            <param name="array">Array</param>
            <param name="index">Index</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.SessionOpen(System.Guid,System.Guid)">
            <summary>
            Session static method, called when a session is opened to tell ISessionController implementing applcations
            a session has been opened.
            </summary>
            <param name="sessionID">The session ID that is being opened.</param>
            <param name="applicationSessionID">The application's session ID to pass into event, used to override
            session ID when needed by provider.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.SessionClose(System.Guid)">
            <summary>
            Session static method, called when a session is closed to tell ISessionController implementing applications
            a session has been closed.
            </summary>
            <param name="sessionID">Session ID closing.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.GetApplicationName(System.Guid)">
            <summary>
            Gets the name of the application for the given application id.
            </summary>
            <param name="applicationId">The application id.</param>
            <returns>The name of the application.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>An <seealso cref="T:System.Collections.IEnumerator"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.IsIsolatedApplication(Microsoft.Uii.Csr.IHostedApplication)">
            <summary>
            This method tells the caller whether the passed in hosted application is an isolated application or not
            </summary>
            <param name="app">The application that needs to be queried</param>
            <returns>Boolean indicting if the application if isolated or not.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.GetIsolatedApplicationbyID(System.Guid)">
            <summary>
            Gets an isolated application by its application id
            </summary>
            <param name="ApplicationID">Application ID</param>
            <returns>IHostedAppUICommand interface of the object.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.IsExtendedApplication(Microsoft.Uii.Csr.IHostedApplication)">
            <summary>
            This method tells the caller whether the passed in hosted application is an extended application or not
            </summary>
            <param name="app">The application that needs to be queried</param>
            <returns>Boolean indicting if the application if extended or not.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.GetExtendedApplicationbyID(System.Guid)">
            <summary>
            Get an extended application by its application id
            </summary>
            <param name="ApplicationID">Application ID</param>
            <returns>IHostedAppUICommand interface of the object.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.QueryInterface(Microsoft.Uii.Csr.AifInterfaces,Microsoft.Uii.Csr.IHostedApplication)">
            <summary>
            This method check whether a particular application implements a specified interface or not
            </summary>
            <param name="requestedInterface">Requested Interface</param>
            <param name="app">The application that needs to be queried</param>
            <returns>Hosted Application</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.DisposeGlobalApplications">
            <summary>
            Microsoft internal use only, donot use this at any point in your code
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.DisposeGlobalWorkItem">
            <summary>
            Microsoft internal use only, donot use this at any point in your code
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.sessionController_RequestSessionChange(System.Object,Microsoft.Uii.Csr.SessionControllerEventArgs)">
            <summary>
            Request Session change handler
            </summary>
            <param name="sender">Sending object.</param>
            <param name="e">Session controller event arguments.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.sessionController_RequestSessionClose(System.Object,Microsoft.Uii.Csr.SessionControllerEventArgs)">
            <summary>
            Request Session close handler
            </summary>
            <param name="sender">Sending object.</param>
            <param name="e">Session controller event arguments.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.sessionController_RequestSessionOpen(System.Object,Microsoft.Uii.Csr.SessionOpenControllerEventArgs)">
            <summary>
            Request Session open handler
            </summary>
            <param name="sender">Sending object.</param>
            <param name="e">Session controller event arguments.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.InitializeWorkItem(System.String)">
            <summary>
            Initialize the workItem and subscribe to EventTopics to handle events raise
            by HostedApplications
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.LoadNonGlobalApplications(System.Boolean)">
            <summary>
            If workflow engine exists then
            	Load only the untagged non-global applications and store together with the untagged global 
            	applications in a displayable app list (hostedApps), so that only all the untagged applications 
            	are shown and ready for usage.  The tagged global applications are kept hidden and tagged 
            	non-global are not loaded till a workflow requires them.
            Else
            	Load all non-global applications and consider them all untagged regardless if they are actaully 
            	tagged or untagged and store together will all global applications which are also consider untagged
            	in a displayable app list (hostedApps), so that all the applications are shown and ready for usage.
            </summary>
            <param name="workflowExists">True if a workflow engine (mechanism/UI that manages the series workflow step) exists</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.LoadGlobalApplications(System.Boolean)">
             <summary>
             Workflow Driven Implementation:
            
             If Workflow engine exists then
            		Loads all the global applications (tagged and untagged) but stores only the 
            		untagged global applications in displayable app list (hostedApps). So that 
            		only the untagged applications are shown and ready for usage and tagged 
            		applications are kept hidden till a workflow require them.
             Else workflow engine does not exists then
            		Loads and display all the global applications regardless if they are tagged or 
            		untaggged and consider them all untagged
             </summary>
             <param name="workflowExists">True if a workflow engine (mechanism/UI that manages the series workflow step) exists</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.GetUnTaggedGlobalApplications">
            <summary>
            Workflow Driven Implementation:
            Gets the list of untagged global applications.
            </summary>
            <returns>List of untagged global applications</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.LoadWorkflowApplications(System.Collections.ArrayList,System.Collections.Generic.IEnumerable{Microsoft.Uii.Common.Entities.ApplicationRecord})">
            <summary>
            Workflow Driven Implementation:
            Loads/unloads the non-global tagged applications required by the workflow and
            adds them to the displayable list of applications including the tagged global 
            applications required by the workflow.  The untagged global and untagged non- 
            global applications will remain in the displayable list always.
            </summary>
            <param name="appsInWorkflow">IDs of the applications required by a workflow</param>
            <param name="appRecords">Application records fetched from database</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.SetupEventSubscriptions(System.Boolean)">
            <summary>
            Setup CAB's event topic subscriptions.  Add or remove the event subscription 
            depending the session changing, so that only the current active session's AppHost 
            instance handles the event.
            </summary>
            <param name="enable">True - add a subscription to the event topic</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.Initialized(Microsoft.Uii.Csr.IHostedApplication)">
            <summary>
            Helper method to check if a global application has already initialized.
            </summary>
            <param name="application">An appliation implementing IHostedApplciation to initialize</param>
            <returns>Boolean indicating if the applcation has been initialized.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.InitializedNonGlobalApplication(Microsoft.Uii.Csr.IHostedApplication)">
            <summary>
            Helper method to check if  a non-global application has already been initialized.
            </summary>
            <param name="application">An appliation implementing IHostedApplciation to initialize</param>
            <returns>Boolean indicating if the applcation has been initialized.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.SetActiveSessionWorkItem(System.String)">
            <summary>
            Inform all the ApplicationHostWorkItem of the current active Session's workItem
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.GetActionName(System.Guid,System.Int32)">
            <summary>
            Gets the name of the action from the action record of the application. This is required by
            the Audit module to consistently record the action Name.
            </summary>
            <param name="appID">ID of the Application</param>
            <param name="actionID">ID of the Action.</param>
            <returns>Name of the action corresponding to the application.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.HandleStateChanged(System.Object,Microsoft.Practices.CompositeUI.StateChangedEventArgs)">
            <summary>
            Event handler for when the workItem state (context) has changed.
            This is for internal UII use only.  Please do not use directly.  Public visibility necessary for CAB integration.
            </summary>
            <param name="sender">Event Sender</param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.invalidateContextObjectCache">
            <summary>
            Invalidating the ContextObject Cache
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.InitializeProxies">
            <summary>
            Creates the web service proxies.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.SetApplicationEventHandlers(Microsoft.Uii.Csr.IHostedApplication,System.Boolean)">
            <summary>
            Sets the event handlers for the application.  Used at startup time for the
            session (and app) and for global applications to change their event handler's
            to the current session whenever the session switches.
            </summary>
            <param name="app">The Application record from the web service.</param>
            <param name="enable">Enable the event handlers</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.setContextNoNotify(Microsoft.Uii.Csr.Context)">
            <summary>
            Set the context but do not notify each application
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.RequiresContextChangeNotification(Microsoft.Uii.Csr.IHostedApplication,System.Boolean)">
            Workflow Driven Implementation:
            <summary>
            Decides whether a given application is need to be notified with the
            change in the context.
            </summary>
            <param name="app">Hosted Application</param>
            <param name="taggedApplicationsOnly">If tagged global and non-global applications only requires context change.</param>
            <returns>Requires context change or not</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.HandleIsolatedFormSelected(Microsoft.Uii.Csr.IHostedAppUICommand,System.EventArgs)">
            <summary>
            Handler for form selected event
            </summary>
            <param name="appSender">The hosted application that has raised the event.</param>
            <param name="args">RequestActionEventArgs arguments.  Refer to RequestActionEventArgs in the HostedAplication.cs for more details</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.#ctor">
            <summary>
            Constructor for the ApplicationHost class.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.HandleActionCompleted(Microsoft.Uii.Csr.IHostedApplication,Microsoft.Uii.Csr.ActionEventArgs)">
            <summary>
            Event handlers for hosted apps
            </summary>
            <param name="appSender">The hosted application that has raised the event.</param>
            <param name="args">RequestActionEventArgs arguments.  Refer to RequestActionEventArgs in the HostedAplication.cs for more details</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.HandleRequestAction(Microsoft.Uii.Csr.IHostedApplication,Microsoft.Uii.Csr.RequestActionEventArgs)">
            <summary>
            This function is the event handler for the RequestAction event raised by a HostedApplication.
            If the action is done to an application name of *, then all applications
            have that action run.  This is a way to have global actions.
            </summary>
            <param name="appSender">The hosted application that has raised the event.</param>
            <param name="args">RequestActionEventArgs arguments.  Refer to RequestActionEventArgs in the HostedAplication.cs for more details</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.HandleChangeContext(Microsoft.Uii.Csr.IHostedApplication,Microsoft.Uii.Csr.ContextEventArgs)">
            <summary>
            All applications, as well as ApplicationHost, share the same instance of
            Context so we don't have to overwrite it b/c everyone is updating the same
            instance.
            </summary>
            <param name="appSender">The hosted application that has raised the event.</param>
            <param name="args">RequestActionEventArgs arguments.  Refer to RequestActionEventArgs in the HostedAplication.cs for more details</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.IsImplicitAifAction(System.String)">
            <summary>
            Determines if the action is an implicit action. 
            </summary>
            <param name="actionName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ApplicationHost.AddDynamicApplication(Microsoft.Uii.Common.Entities.ApplicationRecord)">
            <summary>
            Add an application dynamically to the application host
            </summary>
            <param name="appRecord">Application details</param>
        </member>
        <member name="T:Microsoft.Uii.Csr.ApplicationHostWorkItem">
            <summary>
            This class represents the ApplicationHost workitem which is linked to a session.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ApplicationHostWorkItem.IsGlobalWorkItem">
            <summary>
            Indicates if this <see cref="T:Microsoft.Uii.Csr.ApplicationHostWorkItem"/> is associated
            with an ApplicationHost who is associated with a global session.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ApplicationHostWorkItem.ActiveSessionWorkItemID">
            <summary>
            The ID of the <see cref="T:Microsoft.Uii.Csr.ApplicationHostWorkItem"/> who's session is the 
            current active session.
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.Aif.HostedApplication.AifWindowsFormsHost">
            <summary>
            Class used to host windows controls in WPF shell 
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.AifWindowsFormsHost.#ctor">
            <summary>
            Default Constructor for AifWindowsFormsHost
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.AifWindowsFormsHost.#ctor(System.Windows.Forms.Control)">
            <summary>
            Constructor to assign the win control as a child of the host
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.AifWindowsFormsHost.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.AifWindowsFormsHost.OnWindowPositionChanged(System.Windows.Rect)">
            <summary>
            Called when the hosted windows position changes
            </summary>
            <param name="rcBoundingBox">Bounding Box</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.AifWindowsFormsHost.RemoveChild">
            <summary>
            Remove the child from the host
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.AifWindowsFormsHost.WndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Overridden implimentation of WndProc
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl">
            <summary>
            This control makes it easier to create WPF applications by wrapping the
            most common operations into a base class.
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.IID_INTERNET_EXPLORER">
            <summary>
            Class ID for Internet Explorer
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.IE_COM_ERROR_CODE">
            <summary>
            Internet Explorer COM exception error code when Internet Explorer crashes.
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.actions">
            <summary>
            Dictionary of associated actions
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.actionsByID">
            <summary>
            Dictionary of assosiated actions
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.RequestActionEvent">
            <summary>
            Event to request an action of another application to be invoked.
            </summary>
            Using CAB's EventBroker to publish the event topic.
        </member>
        <member name="E:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.ActionCompletedEvent">
            <summary>
            Event to notify ApplicationHost that an action has completed.
            </summary>
            Using CAB's EventBroker to publish the event topic.
        </member>
        <member name="E:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.RequestActionStatusEvent">
            <summary>
            Event to notify ApplicationHost of action status.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.ChangeContext">
            <summary>
            This event is for internal UII use only and should not be used directly.
            If your hosted control wants to recieve context change notification, you 
            should be overriding NotifyContextChange method in your implementation.
            </summary>
            <remarks>
            Event to notify that the context has changed.
            </remarks>
        </member>
        <member name="P:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.ApplicationHost">
            <summary>
            Intended to provide access to the containing ApplicationHost instance to support advanced hosting senarios.
            Usage may increase coupling between AIF hosted applications, running counter to the architectural intent of AIF.
            Setter is for internal use only, it will have no effect.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.ConfigurationReader">
            <summary>
            Gets or set the hosted controls Configuration Value reader object.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.IsAdapterSessionController">
            <summary>
            Gets a boolean indicating whether the adapter is a SessionController.
            </summary>
            <remarks>
            This property is not needed for the Hosted control but is used to implement the IHostedApplication4 interface.  It returns true is the hosted control implements ISessionController.
            </remarks>
        </member>
        <member name="P:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.TopLevelWindow">
            <summary>
            Returns a control for the owning window of this hosted app.  If
            this is an external application, then null is returned.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.TopLevelWpfWindow">
            <summary>
            Returns a control for the owning window of this hosted app.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.Text">
            <summary>
            Sets/Gets the text for the window or tab control containing this application.
            </summary>
            <remarks>
            This gets or sets the text used for the caption in a floating window or for the
            tab item in a tabbed UI.
            </remarks>
        </member>
        <member name="P:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.Context">
            <summary>
            Contains session-wide context.  Modifying this also notifies other
            applications of the context change.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.EnableAutoSignOn">
            <summary>
            Get the value of private member variable enableAutoSignOn.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.IsNavigating">
            <summary>
            Could be used to indicate an application is changing its state.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.Icon">
            <summary>
            Used for hosted WinForm apps that want a simple way to set their
            icons.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.ImageSource">
            <summary>
            Used for hosted WinForm apps that want a simple way to set their
            icons.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.OptimumSize">
            <summary>
            The size that the applications's window will initially be if it is a floating window.
            </summary>
            <remarks>
            If a HostedControl is floating and there is no OptimumSize set, the size
            of the floating window will be determined by the drawn size of the hosted control.
            </remarks>
        </member>
        <member name="P:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.MinimumSize">
            <summary>
            Minimum size upto which the control can be resized
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.CanEmbed">
            <summary>
            Returns true if the application can be hosted within the UII panels.
            False if the application can only be integrated with UII via scripts.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.AgentID">
            <summary>
            Useful for management apps that need to know who is logged into them.
            This is used for apps supporting the IHostedApplication2 interface.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.IsGlobal">
            <summary>
            Tells whether the hosted application is global
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.IsTagged">
            <summary>
            When true, application is dependent on workflow
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.SessionManager">
            <summary>
            Allows hosted apps to have access to sessions
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.IsListed">
            <summary>
            Allows to be seen but not listed in SessionExplorer or CurrentSessionUI 
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.ImplementedAsCcf20">
            <summary>
            Allows system to run certain routines as CCF 2.0 or prior
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.ApplicationName">
            <summary>
            Returns the name of the hosted application as given in the database.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.ApplicationID">
            <summary>
            Returns the unique id for this hosted application.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.DisplayGroup">
            <summary>
            The name of the UII panel this application is hosted within.
            This is taken from the database Application table initialization XML.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.AppHostWorkItem">
            <summary>
            For CAB integration purposes only; allows injection of current WorkItem
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.loadAdapter(System.Xml.XmlDocument,System.Object)">
            <summary>
            
            </summary>
            <param name="initstring"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.initializeAdapter(Microsoft.Uii.Csr.HostedApplicationAdapter,System.Object)">
            <summary>
            Initialize the adapter
            </summary>
            <param name="adapter"></param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.CreateInstance(System.String,System.String,Microsoft.Practices.CompositeUI.WorkItem)">
            <summary>
            Method used to help create Instances of applications / objects
            </summary>
            <param name="assemblyUri">Uri to the assembly.</param>
            <param name="assemblyType">The type for the application / class.</param>
            <param name="workItem">null to avoid using CAB's module loader service on loaded assembly</param>
            <returns>Returns the object created.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.adapter_AdapterContextChangedEvent(Microsoft.Uii.Csr.Context)">
            <summary>
            Event handler which is run when an adapter needs to notify UII of new
            context information.
            </summary>
            <param name="newContext">New Context XML</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.adapter_AdapterRequestActionEvent(System.String,System.String,System.String)">
            <summary>
            Used when an adapter requests that an action be done on an application.
            </summary>
            <param name="appName">Application Name</param>
            <param name="actionName">Name of the Action</param>
            <param name="data">Data as customized by SI and/or GetFocus information.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.adapter_AdapterFireRequestActionEvent(Microsoft.Uii.Csr.RequestActionEventArgs)">
            <summary>
            Used when an adapter requests that an action be done on an application.
            </summary>
            <param name="args">The event arguments</param>
        </member>
        <member name="P:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.IsDynamic">
            <summary>
            Gets or sets a value indicating whether this instance is dynamic.
            </summary>
            <value>
            	<c>true</c> if this instance is dynamic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.#ctor">
            <summary>
            Hosted Control constructor
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.#ctor(System.Guid,System.String,System.String)">
            <summary>
            Hosted Control constructor
            </summary>
            <param name="appID"> The Application ID for the control.</param>
            <param name="appName"> The name of the Application/</param>
            <param name="initString">Initialization string used to set the control.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.HandleStateChanged(System.Object,Microsoft.Practices.CompositeUI.StateChangedEventArgs)">
            <summary>
            Event handler for when the WorkItem state (Context) has changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.AddImplicitAction(System.String)">
            <summary>
            Adds implicit action . Action Id will use the maximum available int . 
            </summary>
            <param name="actionName"></param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.DoAction(Microsoft.Uii.Csr.RequestActionEventArgs)">
            <summary>
            Method to override in the implementation to handle the action.
            </summary>
            <param name="args">The event arguments for request action event</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.NotifyContextChange(Microsoft.Uii.Csr.Context)">
            <summary>
            Event which happens whenever the context is changed.
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.FireChangeContext(Microsoft.Uii.Csr.ContextEventArgs)">
            <summary>
            Informs all the other applications that the context has changed.
            </summary>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.Initialize">
            <summary>
            Called when the application should initialize its internal state
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.Close">
            <summary>
            Called when the app is closed.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.SessionChange(System.Boolean,System.Guid)">
            <summary>
            Called for global applications when the session is activated or deactivated
            Not called for non-global applications.
            </summary>
            <param name="activate">true for session being activated</param>
            <param name="sessionID">ID of the affected session.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.ErrorMsg(System.String,System.String)">
            <summary>
            So hosted winform applications can use this and have the same error message
            style as the rest of the desktop.
            </summary>
            <param name="msg">Message containing information about the error.</param>
            <param name="advanced">Extra nmessage information containing information about the error.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.AddAction(System.Int32,System.String,System.String)">
            <summary>
            Adds an action for use from one application or the UII core to this
            application.
            An action with id of 1 is the default action and is called when initing
            the application.  There is no requirement to have a default action though.
            </summary>
            <param name="id">ID of the action.</param>
            <param name="name">Name of the action.</param>
            <param name="initialization">Initialization</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.HandleRequestDefaultAction(System.Object,Microsoft.Practices.CompositeUI.Utility.DataEventArgs{Microsoft.Uii.Csr.ApplicationProperties})">
            <summary>
            This is for internal UII use only.  Please do not use directly.  Public visibility necessary for CAB integration.
            </summary>
            <param name="sender"></param>
            <param name="applicationType"></param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.DoDefaultAction">
            <summary>
            Performs this hosted application's default action, if there is one.  The
            default action is the one with an id of 1, but it is not required.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.DoAction(System.Int32,System.String)">
            <summary>
            Called to perform the action configured in the database.
            Do not override this method! To handle DoAction in your implementation override 
            DoAction(RequestActionEventArgs) instead.
            </summary>
            <remarks>
            This method is for internal UII use only, don't override this method.
            To handle DoAction override DoAction(RequestActionEventArgs) instead.
            </remarks>
            <param name="actionID">Action ID</param>
            <param name="data">Action Data</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.FireRequestAction(Microsoft.Uii.Csr.RequestActionEventArgs)">
            <summary>
            Sends a request to perform some action to another application.
            If the RequestActionEventArgs has a target of *, then all apps get the action.
            </summary>
            <param name="args">Event arguments for request action event</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.HandleRequestAction(System.Object,Microsoft.Uii.Csr.RequestActionEventArgs)">
            <summary>
            This is for internal UII use only.  Please do not use directly.  Public visibility necessary for CAB integration.
            </summary>
            <param name="sender">Event Sender</param>
            <param name="args">Event argument for request action event</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.GetIconList">
            <summary>
            Gets the icon images
            </summary>
            <returns>Image list contains icons</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.GetImageSourceList">
            <summary>
            Gets the images
            </summary>
            <returns>ImageSource List</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.GetStateData">
            <summary>
            Gets the application state data for the windows application
            For now we retrieve only the InputText value
            </summary>
            <returns>string containing xml with state data</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.SetStateData(System.String)">
            <summary>
            Sets the StateData to the controls
            </summary>
            <param name="stateXml">contains the xml which has state data</param>
        </member>
        <member name="E:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.RequestAction">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.ActionCompleted">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.SetContext(System.String)">
            <summary>
            This is used to set the context from applicationhost without causing
            further notifications.  It exists so that context can be updated quietly
            before doing the 'real' context notification because some applications
            fire actions onto other apps when the context changes and some actions
            are designed to depend upon context.  In otherwords, a race condition.
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.SetContext(Microsoft.Uii.Csr.Context)">
            <summary>
            This is used to set the context from applicationhost without causing
            further notifications.  It exists so that context can be updated quietly
            before doing the 'real' context notification because some applications
            fire actions onto other apps when the context changes and some actions
            are designed to depend upon context.  In otherwords, a race condition.
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.NotifyContextChange(System.String)">
            <summary>
            Event which happens whenever the context is changed.  This is called by
            the applicationHost
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.DoAction(System.String,System.String)">
            <summary>
            Called to perform the action configured in the database.
            </summary>
            <param name="actionName">Action Name</param>
            <param name="data">Data</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.DoAction(Microsoft.Uii.Csr.Action,System.String)">
            <summary>
            Method to override in the implemention to handle the action.
            </summary>
            <param name="action">Action</param>
            <param name="data">Data</param>
            <remarks>
            This really ought to be an abstract method, but then the UI designer won't
            work for the inherited classes.
            </remarks>
        </member>
        <member name="M:Microsoft.Uii.Csr.Aif.HostedApplication.HostedWpfControl.AuditLogData(Microsoft.Uii.Csr.RequestActionEventArgs,System.DateTime)">
            <summary>
            AuditLogData
            </summary>
            <param name="args"></param>
            <param name="startTime"></param>
        </member>
        <member name="T:Microsoft.Uii.Csr.EventTopicNames">
            <summary>
            This class contains EventTopic constants and is only used internally by UII.
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.EventTopicNames.ActionCompletedEvent">
            <summary>
            Event to notify ApplicationHost that an action has completed.
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.EventTopicNames.RequestActionStatusEvent">
            <summary>
            Event to notify ApplicationHost of action status.
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.EventTopicNames.RequestActionEvent">
            <summary>
            Event to request an action of another application to be invoked.
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.EventTopicNames.RequestDefaultAction">
            <summary>
            Event to request the Default action.
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.ExternalApplication">
            <summary>
            This class is used to integrate an external application with UII.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.ApplicationHost">
            <summary>
            Intended to provide access to the containing ApplicationHost instance to support advanced hosting senarios.
            Usage may increase coupling between AIF hosted applications, running counter to the architectural intent of AIF.
            Setter is for internal use only, it will have no effect.
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.ExternalApplication.applicationType">
            <summary>
            Hosted Application Type
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.applicationObject">
            <summary>
            Application Object. This is the main window handle
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.ExternalApplication.actions">
            <summary>
            Dictionary of associated actions
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.ExternalApplication.actionsByID">
            <summary>
            Dictionary of associated actions
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.AssemblyUrl">
            <summary>
            Extracted from //interopAssembly/URL of the application initstring.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.ExternalControl">
            <summary>
            An instance of ExternalControl that is managing the execution of the hosted external application.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.Process">
            <summary>
            Process object representing the process of the hosted external application.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.HostedApplicationAdapter">
            <summary>
            Application adapter instance for the external application, when configured.
            For Internal Use.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.LoadScriptActionData">
            <summary>
            Action data capture prior to LoadScript()
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.Context">
            <summary>
            Gets and Sets the context for the hosted applications.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.AmbientProperties">
            <summary>
            Exposes the set of AmbientProperties for this application.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.Parent">
            <summary>
            The Windows Forms Control which is parenting this application.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.MinimumSize">
            <summary>
            Not used in CCF 1.02
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.OptimumSize">
            <summary>
            Initial size of the hosted application window if HostInside=false.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.CanEmbed">
            <summary>
            True if the application can be hosted within the UII panels.
            False if the application can only be integrated with UII via scripts.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.IsNavigating">
            <summary>
            Could be used to indicate this hosted application is changing state.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.ApplicationInitializationXml">
            <summary>
            XML from the database that is used to configure the application
            in case this class is inherited and the init information is needed.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.HostInside">
            <summary>
            Gets whether the hosted application window is managed by UII.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.Application">
            <summary>
            Exposes the application object for scripting.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.IsGlobal">
            <summary>
            Tells whether the hosted application is global scoped.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.IsTagged">
            <summary>
            When true, application is dependent on workflow
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.SessionManager">
            <summary>
            Allows hosted applications to have access to the session manager object.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.IsListed">
            <summary>
            Allows to be seen but not listed in SessionExplorer or CurrentSessionUI.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.ImplementedAsCcf20">
            <summary>
            Allows system to run certain routines as CCF 2.0 or prior.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.ApplicationID">
            <summary>
            The unique ID for the application as given in the database.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.ApplicationName">
            <summary>
            Name of this hosted application.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.TopLevelWindow">
            <summary>
            The Windows Forms Control this hosted application resides in.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.DisplayGroup">
            <summary>
            Get the display group.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.Icon">
            <summary>
            Used to indicate the preferred icon to use
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.AppHostWorkItem">
            <summary>
            For CAB integration purposes only; allows injection of current WorkItem
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalApplication.IsDynamic">
            <summary>
            Gets or sets a value indicating whether this instance is dynamic.
            </summary>
            <value>
            	<c>true</c> if this instance is dynamic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Microsoft.Uii.Csr.ExternalApplication.RequestActionEvent">
            <summary>
            Event publication for event to request an action of another application to be invoked.
            Using CAB's EventBroker to publish the event topic
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.ExternalApplication.ActionCompletedEvent">
            <summary>
            Event to notify ApplicationHost that an action has completed.
            Using CAB's EventBroker to publish the event topic.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.ExternalApplication.RequestActionStatusEvent">
            <summary>
            Event to notify ApplicationHost of action status.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.ExternalApplication.ActionCompleted">
            <summary>
            Event to notify AppHost that an action has completed
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.ExternalApplication.RequestAction">
            <summary>
            Event to request an action of another application to be invoked
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.ExternalApplication.ChangeContext">
            <summary>
            Event to add a name-value pair to the context
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.#ctor(System.Guid,System.String,System.String)">
            <summary>
            Constructor when creating an external application hosted within or by UII.
            </summary>
            <param name="appID">Application ID for the control.</param>
            <param name="appName">Name of the Application/</param>
            <param name="initString">Initialization string used to set the control.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.NotifyContextChange(Microsoft.Uii.Csr.Context)">
            <summary>
            Notify the application that the context changed
            </summary>
            <param name="context">context</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.FireRequestAction(Microsoft.Uii.Csr.RequestActionEventArgs)">
            <summary>
            Additional public members to expose data and events to scripts
            </summary>
            <param name="args">RequestAction data</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.HandleRequestAction(System.Object,Microsoft.Uii.Csr.RequestActionEventArgs)">
            <summary>
            This is for internal UII use only.  Please do not use directly.  Public visibility necessary for CAB integration.
            </summary>
            <param name="sender">sender</param>
            <param name="args">arguments</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.GetIconList">
            <summary>
            Gets the icon images
            <returns>An ImageList containing Icons</returns>
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.GetStateData">
            <summary>
            Gets the application state data for this application
            For now we retrieve only the ambient properties and context value
            </summary>
            <returns>string containing xml with state data</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.SetStateData(System.String)">
            <summary>
            Set the application to the state provided in the xml string.
            </summary>
            <param name="stateXml">contains the state data for the application</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.Initialize">
            <summary>
            Called by the framework when it is ready for the application to initialize itself.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.Close">
            <summary>
            Called when the hosting framework wishes to close this application.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.SessionChange(System.Boolean,System.Guid)">
            <summary>
            Called for global applications when the session is activated or deactivated
            </summary>
            <param name="activate">true for session being activated</param>
            <param name="sessionID">ID of the affected session.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.AddAction(System.Int32,System.String,System.String)">
            <summary>
            Adds an action to the application's list.  An action with id == 1
            is the 'default' action and gets called on init.  There does not need
            to be a default action though, just don't have an action with id 1 if
            you don't want a default.
            </summary>
            <param name="id">Action Id</param>
            <param name="name">Action Name</param>
            <param name="initialization">Action init string</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.DoDefaultAction">
            <summary>
            Performs the default action on the application, if there is
            a default action.  The default action is the one with an id of 1, but
            there may not be one.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.HandleRequestDefaultAction(System.Object,Microsoft.Practices.CompositeUI.Utility.DataEventArgs{Microsoft.Uii.Csr.ApplicationProperties})">
            <summary>
            This is for internal UII use only.  Please do not use directly.  Public visibility necessary for CAB integration.
            </summary>
            <param name="sender">sender</param>
            <param name="appType">application Type</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.DoAction(System.Int32,System.String)">
            <summary>
            Performs an action where the action is specified by its ID.
            </summary>
            <param name="actionID">Action Id</param>
            <param name="data">Action Data</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.UpdateContextValue(System.String,System.String)">
            <summary>
            Accepts a name and value pair and adds it
            (or updates it if it currently exists) to the current context.  
            Then notify other apps the context has changed.
            The caller is NO LONGER responsible for notifying other apps of the context change via
            this.ChangeContext().
            </summary>
            <param name="name">Key</param>
            <param name="val">Value</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.UpdateContextValue(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Accepts a Dictionary collection of keys and values and adds them 
            (or updates it if it currently exists) to the current context.
            Then notify other apps the context has changed.
            </summary>
            <param name="contextValues">Dictionary of context values</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.GetContextValue(System.String)">
            <summary>
            Returns the value associated with the provided context key.
            If the key is not found, the empty string will be returned.
            If no reference to the Context object is held, null will be returned.
            </summary>
            <param name="key">Context key</param>
            <returns>Context value corresponding to the provided key</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.adapter_AdapterRequestActionEvent(System.String,System.String,System.String)">
            <summary>
            Used when an adapter requests that an action be done on an application.
            </summary>
            <param name="applicationName">Application name to fire action against.</param>
            <param name="actionName">The action name to fire.</param>
            <param name="data">The data to send to the action.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.adapter_AdapterFireRequestActionEvent(Microsoft.Uii.Csr.RequestActionEventArgs)">
            <summary>
            Used when an adapter requests that an action be done on an application.
            </summary>
            <param name="args">The event arguments</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.Focus">
            <summary>
            Gives the focus to the hosted Win32 application
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.HandleStateChanged(System.Object,Microsoft.Practices.CompositeUI.StateChangedEventArgs)">
            <summary>
            Event handler for when the workItem state (context) has been changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.initializeAdapter(Microsoft.Uii.Csr.HostedApplicationAdapter)">
            <summary>
            Initilize the adapter
            </summary>
            <param name="adapter"></param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.loadAdapter(System.Xml.XmlDocument)">
            <summary>
            Loads an adapter (if any) to modify the application behavior.
            </summary>
            <param name="initstring">application initstring</param>
            <returns>Adapter to use, or null.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.adapter_AdapterProcessChangedEvent(System.Diagnostics.Process)">
            <summary>
            Event handler which is run when an adapter needs to notify UII of a process change.
            </summary>
            <param name="process"></param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.adapter_AdapterContextChangedEvent(Microsoft.Uii.Csr.Context)">
            <summary>
            Event handler which is run when an adapter needs to notify UII of new
            context information.
            </summary>
            <param name="newContext"></param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.DoAction(Microsoft.Uii.Csr.RequestActionEventArgs)">
            <summary>
            Performs an action where the action is given by the RequestActionEventArgs.
            </summary>
            <param name="args">RequestActionEventArgs sent into the actiobm the argument holds the action object.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.SetContext(System.String)">
            <summary>
            This is used to set the context from ApplicationHost without causing
            further notifications.  It exists so that context can be updated quietly
            before doing the 'real' context notification because some applications
            fire actions onto other apps when the context changes and some actions
            are designed to depend upon context.  In otherwords, a race condition.
            </summary>
            <param name="context">context</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.SetContext(Microsoft.Uii.Csr.Context)">
            <summary>
            This is used to set the context from ApplicationHost without causing
            further notifications.  It exists so that context can be updated quietly
            before doing the 'real' context notification because some applications
            fire actions onto other apps when the context changes and some actions
            are designed to depend upon context.  In other words, a race condition.
            </summary>
            <param name="context">context</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.NotifyContextChange(System.String)">
            <summary>
            Called by application host to notify the app that the context has changed
            </summary>
            <param name="context">context information</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalApplication.DoAction(System.String,System.String)">
            <summary>
            Performs an action where the action is given by its unique name.
            </summary>
            <param name="actionName">Name of the action as defined in Admin Console for the application that calls this external one.</param>
            <param name="data">XML content of Admin Console "Build Action Initialization String" panel that describes the action.</param>
        </member>
        <member name="T:Microsoft.Uii.Csr.ExternalControl">
            <summary>
            Wraps external applications in a .Net control so the UII application host
            can treat them as normal UII hosted applications.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalControl.isAppClosing">
            <summary>
            flag to close applications
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalControl.NoMessagePump">
            <summary>
            Indicates whether message pump is enabled
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalControl.Process">
            <summary>
            The running process associated with this control.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalControl.MainWindow">
            <summary>
            Top-level window handle of the external application.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalControl.HandleRef">
            <summary>
            Returns a HandleRef for Control.Handle
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalControl.AssemblyUrl">
            <summary>
            Returns the configured path of the executable.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalControl.HostInside">
            <summary>
            True when either <hostInside/> or <hostOnTop/> have been configured.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalControl.HostOnTop">
            <summary>
            True when <hostOnTop/> have been configured.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalControl.Hwnd">
            <summary>
            Obsolete.  Retained for legacy compatibility.  Use MainWindow instead.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ExternalControl.Icon">
            <summary>
            Icon extracted from the running process.
            Returns null if no icon could be extracted.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalControl.#ctor(System.Xml.XmlDocument)">
            <summary>
            Initializes a new instance of the Microsoft.Uii.Csr.ExternalControl class with the specified initstring.
            </summary>
            <param name="appInitString">Application InitString</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalControl.Start(System.Boolean)">
            <summary>
            Parses initstring, launches the corresponding process (if one has not been already assigned),
            searches for (and acquires) the main window of the application,
            then configures a window management strategy based upon the initstring configuration.
            </summary>
            <param name="pumpMessagesWhileWaiting">True to pump windows messages while waiting for
            the main window to appear.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalControl.Host(System.Boolean)">
            <summary>
            Host
            </summary>
            <param name="pumpMessagesWhileWaiting"></param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalControl.FindTabItemToListen">
            <summary>
            Find the Wpf tabitem to listen
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalControl.Close">
            <summary>
            Terminates the hosted Process.
            Attempts to first send MainWindow a close message before termination.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalControl.Clear">
            <summary>
            Resets internal state so another initstring can be started.
            Any associated running Process will NOT terminated, use Close() to terminate the process.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalControl.AttachListenersForWindowPositioning(System.Windows.Controls.TabItem)">
            <summary>
            Attaches to events on the specified tabItem and parent tabControl to support window positioning.
            Multiple invocations with the same tabItem will have the same effect as a single invocation.
            If window positioning is not configured, this method will have no effect.
            </summary>
            <param name="tabItem">TabItem</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalControl.AttachListenersForWindowPositioning(System.Windows.Forms.TabPage)">
            <summary>
            Attaches to events on the specified tabPage and parent tabControl to support window positioning.
            Multiple invocations with the same tabPage will have the same effect as a single invocation.
            If window positioning is not configured, this method will have no effect.
            </summary>
            <param name="tabPage">TabPage</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalControl.DetachAllListenersForWindowPositioning">
            <summary>
            Detaches any previously attached events that support window positioning.
            If window positioning is not configured, this method will have no effect.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalControl.DetachAllListenersForWpfWindowPositioning">
            <summary>
            Detaches any previously attached events that support window positioning.
            If window positioning is not configured, this method will have no effect.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalControl.ShowAndActivatePositionedWindow">
            <summary>
            Shows and Activates (sizes and positions) the positioned window.
            If window positioning is not configured, this method will have no effect.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalControl.ShowAndActivateDeckPositionedWindow">
            <summary>
            Shows and Activates (sizes and positions) the positioned window.
            If window positioning is not configured, this method will have no effect.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalControl.HidePositionedWindow">
            <summary>
            Hides the positioned window.
            If window positioning is not configured, this method will have no effect.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalControl.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            OnPaintBackground
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ExternalControl.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Microsoft.Uii.Csr.ActionCompletedEventHandler">
            <summary>
            Delegate event handler use in event to notify AppHost that an action has completed
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.RequestActionEventHandler">
            <summary>
            Delegate event handler use in event to request an action of another application to be invoked
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.ChangeContextEventHandler">
            <summary>
            Delegate event handler use in event to add a name-value pair to the context
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.ApplicationType">
            <summary>
            The set of application types that are read from the web service.
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.ApplicationType.DisabledApplication">
            <summary>
            Disabled application
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.ApplicationType.WinFormApplication">
            <summary>
            Winform (hosted control) application.
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.ApplicationType.WebApplication">
            <summary>
            Web application.
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.ApplicationType.ExternalApplication">
            <summary>
            External (e.g. Win 32) application.
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.ApplicationType.ExtendedApplication">
            <summary>
            Extended applications.  Frequently numbers outside the range of the application
            type enumeration are used.
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.ActionEventArgs">
            <summary>
            Event argument for action completion event
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ActionEventArgs.ActionID">
            <summary>
            Get the Action ID.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ActionEventArgs.Action">
            <summary>
            Get the Action name
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ActionEventArgs.Data">
            <summary>
            Get the Action Data
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ActionEventArgs.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Constructor for the action event.
            </summary>
            <param name="actionID">Action ID</param>
            <param name="action">The name of the action</param>
            <param name="data">Some data to pass along with the action</param>
        </member>
        <member name="T:Microsoft.Uii.Csr.RequestActionEventArgs">
            <summary>
            Event argument for request action event
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.RequestActionEventArgs.ActionReturnValue">
            <summary>
            Used to return a value from DoAction.
            ActionReturnValue and ActionReturnValueObject properties share the same backing store.
            Returns the empty string if the underlying value cannot be cast to a string.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.RequestActionEventArgs.ActionReturnValueObject">
            <summary>
            Used to return a value from DoAction.
            ActionReturnValue and ActionReturnValueObject properties share the same backing store.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.RequestActionEventArgs.SessionId">
            <summary>
            Get the Action session
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.RequestActionEventArgs.TargetApplication">
            <summary>
            Get the Action target
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.RequestActionEventArgs.Action">
            <summary>
            Get the Action name
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.RequestActionEventArgs.Data">
            <summary>
            Get or set the Action data.
            Data and DataObject properties share the same backing store.
            Returns the empty string if the underlying value cannot be cast to a string.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.RequestActionEventArgs.DataObject">
            <summary>
            Get or set the Action data.
            Data and DataObject properties share the same backing store.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.RequestActionEventArgs.#ctor(Microsoft.Uii.Csr.ApplicationHostWorkItem,System.String,System.String,System.Object)">
            <summary>
            Create a request to run an action.
            </summary>
            <param name="appHostWorkItem">The CAB workitem containing the target application (IsGlobalWorkItem=true indicates use active session)</param>
            <param name="target">The application to run the action on or * for all applications</param>
            <param name="action">The name of the action</param>
            <param name="data">Some data to pass along to the action</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.RequestActionEventArgs.#ctor(System.String,System.String,System.String,System.Object)">
            <summary>
            Create a request to run an action.
            </summary>
            <param name="sessionId">The session id containing the target application (null/empty indicates use active session)</param>
            <param name="target">The application to run the action on or * for all applications</param>
            <param name="action">The name of the action</param>
            <param name="data">Some data to pass along to the action</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.RequestActionEventArgs.#ctor(System.String,System.String,System.Object)">
            <summary>
            Create a request to run an action.
            </summary>
            <param name="target">The application to run the action on or * for all applications</param>
            <param name="action">The name of the action</param>
            <param name="data">Some data to pass along to the action</param>
        </member>
        <member name="T:Microsoft.Uii.Csr.IHostedApplication">
            <summary>
            Interface from which hosted applications are derived.
            </summary>
            <remarks>
            Use IHostedApplication4 for new implementations.
            </remarks>
        </member>
        <member name="P:Microsoft.Uii.Csr.IHostedApplication.ApplicationID">
            <summary>
            Get the Primary key
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.IHostedApplication.ApplicationName">
            <summary>
            Get the Name that can be used for display purposes
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.IHostedApplication.DisplayGroup">
            <summary>
            Get the Display group extracted from initialize string
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.IHostedApplication.CanEmbed">
            <summary>
            Get whether the application is an external application
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.IHostedApplication.IsNavigating">
            <summary>
            Get whether the application is currently navigating.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.IHostedApplication.OptimumSize">
            <summary>
            Get a hint for optimal window size
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.IHostedApplication.MinimumSize">
            <summary>
            Get a hint for minimum window size
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.IHostedApplication.TopLevelWindow">
            <summary>
            Get the Top level window for the application
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.IHostedApplication.Initialize">
            <summary>
            Called into the application by the framework to allow it to initialize
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.IHostedApplication.AddAction(System.Int32,System.String,System.String)">
            <summary>
            Add an action to the application
            </summary>
            <param name="id">Application ID.</param>
            <param name="name">Application Name.</param>
            <param name="initialization">Application initialization string.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.IHostedApplication.DoAction(System.String,System.String)">
            <summary>
            Invoke an action on the application
            </summary>
            <param name="action">The name of the action to perform.</param>
            <param name="data">The data to send into the action.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.IHostedApplication.DoAction(System.Int32,System.String)">
            <summary>
            Invoke an action with action ID on the application
            </summary>
            <param name="actionID">The ID of the action to perform.</param>
            <param name="data">The data to send into the action.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.IHostedApplication.DoDefaultAction">
            <summary>
            Invokes the default action for the application
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.IHostedApplication.NotifyContextChange(System.String)">
            <summary>
            Notify the application that context changed
            </summary>
            <param name="context">The context used to notify upon change.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.IHostedApplication.Close">
            <summary>
            Close the application.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.IHostedApplication.GetStateData">
            <summary>
            Request to the hosted app to return its current state.
            </summary>
            <returns>A string representing the state data.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.IHostedApplication.SetStateData(System.String)">
            <summary>
            Passes saved state to the hosted application.
            </summary>
            <param name="stateXml">State information.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.IHostedApplication.GetIconList">
            <summary>
            Image list for the application.
            </summary>
            <returns>Image list for the application.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.IHostedApplication.SessionChange(System.Boolean,System.Guid)">
            <summary>
            Called whenever the session is changed.  Only global applications
            receive this since 'local' applications don't need to know if their
            session is shown or not.
            </summary>
            <param name="activate">true if the session is becoming active, false
            if another session is becoming active.</param>
            <param name="sessionID">ID of the session being affected</param>
        </member>
        <member name="E:Microsoft.Uii.Csr.IHostedApplication.ActionCompleted">
            <summary>
            Event to notify AppHost that an action has completed
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.IHostedApplication.RequestAction">
            <summary>
            Event to request an action of another application to be invoked
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.IHostedApplication.ChangeContext">
            <summary>
            Event to add a name-value pair to the context
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.IHostedApplication2">
            <summary>
            An extension on IHostedApplication.
            </summary>
            <remarks>
            Implements IHostedApplication.  Use IHostedApplication4 for new implementations.
            </remarks>
        </member>
        <member name="P:Microsoft.Uii.Csr.IHostedApplication2.Icon">
            <summary>
            Gets or sets the icon used to represent the application in the UII UI.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.IHostedApplication2.SetContext(System.String)">
            <summary>
            This is used to set the context from ApplicationHost without causing
            further notifications.  It exists so that context can be updated quietly
            before doing the 'real' context notification because some applications
            fire actions onto other apps when the context changes and some actions
            are designed to depend upon context.  In other words, a race condition.
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="T:Microsoft.Uii.Csr.IHostedApplication3">
            <summary>
            An extension on IHostedApplication2.
            </summary>
            <remarks>
            Implements IHostedApplication2.  Use IHostedApplication4 for new implementations.
            </remarks>
        </member>
        <member name="P:Microsoft.Uii.Csr.IHostedApplication3.AgentID">
            <summary>
            Gets or sets the agent who is logged in
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.IHostedApplication3.IsGlobal">
            <summary>
            Gets or sets whether the hosted application is global
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.IHostedApplication3.SessionManager">
            <summary>
            Set the session manager object
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.IHostedApplication3.IsListed">
            <summary>
            Get whether the application is allowed to be seen but not listed.
            </summary>
            <remarks>
            Usually used for SessionExplorer or CurrentSessionUI.
            </remarks>
        </member>
        <member name="P:Microsoft.Uii.Csr.IHostedApplication3.ImplementedAsCcf20">
            <summary>
            Get whether the application is allowed to run certain routines as CCF 2.0 or prior
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.IHostedApplication3.FireRequestAction(Microsoft.Uii.Csr.RequestActionEventArgs)">
            <summary>
            Sends a request to perform some action to another application.
            If the RequestActionEventArgs has a target of *, then all apps get the action.
            </summary>
            <param name="args">RequestActionEventArgs for the event</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.IHostedApplication3.NotifyContextChange(Microsoft.Uii.Csr.Context)">
            <summary>
            Notify the application that the context changed
            </summary>
            <param name="context">The context object with which to notify.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.IHostedApplication3.SetContext(Microsoft.Uii.Csr.Context)">
            <summary>
            This is used to set the context from ApplicationHost without causing
            further notifications.  It exists so that context can be updated quietly
            before doing the 'real' context notification because some applications
            fire actions onto other apps when the context changes and some actions
            are designed to depend upon context.  In other words, a race condition.
            </summary>
            <param name="context">The context object with which is set.</param>
        </member>
        <member name="T:Microsoft.Uii.Csr.IHostedApplication4">
            <summary>
            An extension on IHostedApplication3 so that later UII applications can support
            new features.
            </summary>
            <remarks>
            Implements IHostedApplication3.  Use IHostedApplication4 for new implementations.
            </remarks>
        </member>
        <member name="P:Microsoft.Uii.Csr.IHostedApplication4.ConfigurationReader">
            <summary>
            Gets or set the hosted controls Configuration Value reader object.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.IHostedApplication4.IsAdapterSessionController">
            <summary>
            Gets a boolean indicating whether the adapter is a SessionController.
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.IHostedApplication5">
            <summary>
            An extension on IHostedApplication4 so that UII WPF applications can support
            new features.
            </summary>
            <remarks>
            Implements IHostedApplication4.
            </remarks>
        </member>
        <member name="P:Microsoft.Uii.Csr.IHostedApplication5.TopLevelWpfWindow">
            <summary>
            Get the Top level window for the application
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.IHostedApplication5.ImageSource">
            <summary>
            Image used to represent the hosted application
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.Action">
            <summary>
            Actions for hosted applications (utility class for implementation of the interface)
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Action.ActionID">
            <summary>
            Get and set the Action ID.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Action.Name">
            <summary>
            Get and set the Action name
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Action.Initialization">
            <summary>
            Get and set the Action initialization information
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Action.IsDefault">
            <summary>
            Get and set the is default flag
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.Action.#ctor(System.Int32,System.String,System.String)">
            <summary>
            The action class constructor.
            </summary>
            <param name="id">Action ID</param>
            <param name="name">Action Name</param>
            <param name="initialization">Action initialization information</param>
        </member>
        <member name="T:Microsoft.Uii.Csr.HostedApplication">
            <summary>
            Hosted Application abstract base classed, used for hosted application classes like External and Web
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.HostedApplication.ScriptObjectName">
            <summary>
            Hosted Application
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedApplication.engine">
            <summary>
            engine
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.HostedApplication.EngineType">
            <summary>
            Engine Type
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.HostedApplication.EngineType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.HostedApplication.EngineType.VBScript">
            <summary>
            VBScript
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.HostedApplication.EngineType.JScript">
            <summary>
            JScript
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedApplication.IsAdapterSessionController">
            <summary>
            Gets a boolean indicating whether the adapter is a SessionController.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedApplication.AgentID">
            <summary>
            Get or set the agent ID.
            </summary>
            <remarks>
            Useful for management apps that need to know who is logged into them.
            This is used for apps supporting the IHostedApplication2 interface.
            </remarks>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedApplication.ApplicationID">
            <summary>
            Get the application ID.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedApplication.ApplicationName">
            <summary>
            Get the application name.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedApplication.OptimumSize">
            <summary>
            Get the hint for the optimum size.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedApplication.MinimumSize">
            <summary>
            Get the hint for the minimum size.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedApplication.TopLevelWindow">
            <summary>
            Get the top level window.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedApplication.DisplayGroup">
            <summary>
            Get the display group.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedApplication.CanEmbed">
            <summary>
            Get whether the application can be embedded (is it external?).
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedApplication.IsNavigating">
            <summary>
            Get whether the application is navigating.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedApplication.Icon">
            <summary>
            Gets or sets the icon used to represent the application in the UII UI.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedApplication.SessionManager">
            <summary>
            Allows hosted apps to have access to the session manager object
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedApplication.IsGlobal">
            <summary>
            Tells whether the hosted application is global
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedApplication.IsListed">
            <summary>
            Allows to be seen but not listed in SessionExplorer or CurrentSessionUI 
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedApplication.ImplementedAsCcf20">
            <summary>
            Allows system to run certain routines as CCF 2.0 or prior
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplication.CreateInstance(System.String,System.String,Microsoft.Practices.CompositeUI.WorkItem)">
            <summary>
            Method used to help create Instances of applications / objects
            </summary>
            <param name="assemblyUri">Uri to the assembly.</param>
            <param name="assemblyType">The type for the application / class.</param>
            <param name="workItem">null to avoid using CAB's module loader service on loaded assembly</param>
            <returns>Returns the object created.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplication.CreateInstance(System.String,System.String)">
            <summary>
            Method used to help create Instances of applications / objects
            </summary>
            <param name="assemblyUri">Uri to the assembly.</param>
            <param name="assemblyType">The type for the application / class.</param>
            <returns>Returns the object created.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplication.IsImplicitAction(System.String)">
            <summary>
            Returns true for actions that do not have to be configured
            </summary>
            <param name="actionName">Name of the action</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplication.Initialize">
            <summary>
            Called into the application by the framework to allow it to initialize
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplication.AddAction(System.Int32,System.String,System.String)">
            <summary>
            Method to add an action.
            </summary>
            <param name="id">Action ID.</param>
            <param name="name">Action Name.</param>
            <param name="initialization">Action initialization information.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplication.DoAction(System.String,System.String)">
            <summary>
            Do an action.
            </summary>
            <param name="action">Action Name.</param>
            <param name="data">Data information used for the action.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplication.DoAction(System.Int32,System.String)">
            <summary>
            Do an action.
            </summary>
            <param name="actionID">Action ID.</param>
            <param name="data">Data information used for the action.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplication.DoAction(Microsoft.Uii.Csr.RequestActionEventArgs)">
            <summary>
            Do an action.
            </summary>
            <param name="args">The event arguments for request action event.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplication.DoDefaultAction">
            <summary>
            Default action to fire.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplication.NotifyContextChange(System.String)">
            <summary>
            Notify the application that the context changed
            </summary>
            <param name="context">The context string used in the notification.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplication.NotifyContextChange(Microsoft.Uii.Csr.Context)">
            <summary>
            Notify the application that the context changed
            </summary>
            <param name="context">The context object used in the notification.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplication.Close">
            <summary>
            Close the application.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplication.GetStateData">
            <summary>
            Request to the hosted app to return its current state.
            </summary>
            <returns>A string representing the state data.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplication.SetStateData(System.String)">
            <summary>
            Passes saved state to the hosted application.
            </summary>
            <param name="stateXml">State information.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplication.GetIconList">
            <summary>
            Image list for the application.
            </summary>
            <returns>Image list for the application.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplication.SessionChange(System.Boolean,System.Guid)">
            <summary>
            Called whenever the session is changed.  Only global applications
            receive this since 'local' applications don't need to know if their
            session is shown or not.
            </summary>
            <param name="activate">true if the session is becoming active, false
            if another session is becoming active.</param>
            <param name="sessionID">ID of the session being affected</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplication.SetContext(System.String)">
            <summary>
            This is used to set the context from ApplicationHost without causing
            further notifications.  It exists so that context can be updated quietly
            before doing the 'real' context notification because some applications
            fire actions onto other apps when the context changes and some actions
            are designed to depend upon context.  In other words, a race condition.
            </summary>
            <param name="context">Context to be set</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplication.FireRequestAction(Microsoft.Uii.Csr.RequestActionEventArgs)">
            <summary>
            Sends a request to perform some action to another application.
            If the RequestActionEventArgs has a target of *, then all apps get the action.
            </summary>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplication.SetContext(Microsoft.Uii.Csr.Context)">
            <summary>
            This is used to set the context from ApplicationHost without causing
            further notifications.  It exists so that context can be updated quietly
            before doing the 'real' context notification because some applications
            fire actions onto other apps when the context changes and some actions
            are designed to depend upon context.  In other words, a race condition.
            </summary>
            <param name="context">context to be set</param>
        </member>
        <member name="E:Microsoft.Uii.Csr.HostedApplication.ActionCompletedEvent">
            <summary>
            Event to notify ApplicationHost that an action has completed.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.HostedApplication.RequestActionEvent">
            <summary>
            Event fired to request an action.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.HostedApplication.ActionCompleted">
            <summary>
            Event fired when the action is complete.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.HostedApplication.RequestAction">
            <summary>
            Event fired to request an action.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.HostedApplication.ChangeContext">
            <summary>
            This event is fired when the context is changed.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.HostedApplication.RequestActionStatusEvent">
            <summary>
            Event to notify ApplicationHost of action status.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplication.GetCompiledState(System.Byte[]@,System.Byte[]@)">
            <summary>
            Get the compiled State
            </summary>
            <param name="pe">PE Byte information.</param>
            <param name="debugInfo">Debug information</param>
            <remarks>Used by IVsaSite interface</remarks>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplication.GetEventSourceInstance(System.String,System.String)">
            <summary>
            Get the event source instance.
            </summary>
            <param name="itemName">The item name of the event.</param>
            <param name="eventSourceName">The source name of the event.</param>
            <returns>Object of the instance of the event source.</returns>
            <remarks>Used by IVsaSite interface</remarks>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplication.GetGlobalInstance(System.String)">
            <summary>
            Get global instances
            </summary>
            <param name="name">Global name.</param>
            <returns>Object is global instance.</returns>
            <remarks>Used by IVsaSite interface</remarks>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplication.Notify(System.String,System.Object)">
            <summary>
            Notify the script with information.
            </summary>
            <param name="notify">String notification information.</param>
            <param name="info">String passed in as information.</param>
            <remarks>Used by IVsaSite interface</remarks>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplication.OnCompilerError(Microsoft.Vsa.IVsaError)">
            <summary>
            On Compiler error
            </summary>
            <param name="error">IVsa Error object</param>
            <returns>Boolean</returns>
            <remarks>Used by IVsaSite interface</remarks>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedApplication.ConfigurationReader">
            <summary>
            Configuration reader used for reading app settings from application configuration or the server
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.ApplicationProperties">
            <summary>
            Enumeration of application properties.
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.ApplicationProperties.GlobalUntagged">
            <summary>
            Applications that are global and independent of workflow.
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.ApplicationProperties.NonGlobalUntagged">
            <summary>
            Applications that are non-global and independent of workflow.
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.ApplicationProperties.Tagged">
            <summary>
            Applications that are either global or non-global and are dependent on workflow.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplicationUtility.LogDefaultActionExecution(Microsoft.Uii.Csr.IHostedApplication,System.String)">
            <summary>
            Log default action execution.
            </summary>
            <param name="app">The IHostedApplication to log the default against against.</param>
            <param name="actionName">The name of the action being fired.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplicationUtility.LogDefaultActionExecution(Microsoft.Uii.Csr.IHostedApplication,System.String,System.String,System.Boolean,System.DateTime)">
            <summary>
            Log default action execution with session id and IsGlobal
            </summary>
            <param name="app">The IHostedApplication to log the default against against.</param>
            <param name="actionName">The name of the action being fired.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplicationUtility.SetContextState(Microsoft.Uii.Csr.Context,Microsoft.Uii.Csr.ApplicationHostWorkItem,System.Object)">
            <summary>
            Set the State of the workItem with the context passed in.  This will also fire
            the StateChanged event informing all other applications the state has changed.
            </summary>
            <param name="context">The context object</param>
            <param name="appHostWorkItem">The WorkItem</param>
            <param name="modifier">The object that modified the context</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplicationUtility.GetContextState(Microsoft.Uii.Csr.ApplicationHostWorkItem)">
            <summary>
            Get the context state from the workItem.
            </summary>
            <param name="appHostWorkItem"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedApplicationUtility.HasSubscription(System.String,Microsoft.Uii.Csr.ApplicationHostWorkItem)">
            <summary>
            Check weather the target application passed in has subscibed to the "RequestActionEvent"
            Event Topic.
            </summary>
            <param name="targetApplication">The name of the target application to fire an action to.</param>
            <param name="appHostWorkItem">The ApplicationHostWorkItem</param>
            <returns>Returns True if RequestActionEvent contains a subscription for the target app, False otherwise</returns>
        </member>
        <member name="T:Microsoft.Uii.Csr.HostedControl">
            <summary>
            This control makes it easier to create WinForm applications by wrapping the
            most common operations into a base class.
            </summary>
            <remarks>
            It would be better to make this an abstract class and have the DoAction( Action )
            method also be abstract.  However doing so causes the VS 2003 UI designer to not
            allow drag-n-drop layout which most people will want.  Thus, the obvious
            abstract-ness of this class is not being coded.
            </remarks>
        </member>
        <member name="F:Microsoft.Uii.Csr.HostedControl.actions">
            <summary>
            Dictionary of actions
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.HostedControl.actionsByID">
            <summary>
            Dictionary of actions
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.HostedControl.RequestActionEvent">
            <summary>
            Event to request an action of another application to be invoked.
            Using CAB's EventBroker to publish the event topic.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.HostedControl.ActionCompletedEvent">
            <summary>
            Event to notify ApplicationHost that an action has completed.
            Using CAB's EventBroker to publish the event topic.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.HostedControl.RequestActionStatusEvent">
            <summary>
            Event to notify ApplicationHost of action status.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.HostedControl.ChangeContext">
            <summary>
            This event is for internal UII use only and should not be used directly.
            If your hosted control wants to recieve context change notification, you 
            should be overriding NotifyContextChange method in your implementation.
            </summary>
            <remarks>
            Event to notify that the context has changed.
            </remarks>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedControl.ApplicationHost">
            <summary>
            Intended to provide access to the containing ApplicationHost instance to support advanced hosting senarios.
            Usage may increase coupling between AIF hosted applications, running counter to the architectural intent of AIF.
            Setter is for internal use only, it will have no effect.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedControl.ConfigurationReader">
            <summary>
            Gets or set the hosted controls Configuration Value reader object.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedControl.IsAdapterSessionController">
            <summary>
            Gets a boolean indicating whether the adapter is a SessionController.
            </summary>
            <remarks>
            This property is not needed for the Hosted control but is used to implement the IHostedApplication4 interface.  It returns true is the hosted control implements ISessionController.
            </remarks>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedControl.TopLevelWindow">
            <summary>
            Returns a control for the owning window of this hosted app.  If
            this is an external application, then null is returned.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedControl.Text">
            <summary>
            Sets/Gets the text for the window or tab control containing this application.
            </summary>
            <remarks>
            This gets or sets the text used for the caption in a floating window or for the
            tab page in a tabbed UI.
            
            This is 'new' not 'override' since if we override it, we also will get a
            stack overflow in the UI design tool.
            </remarks>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedControl.Context">
            <summary>
            Contains session-wide context.  Modifying this also notifies other
            applications of the context change.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedControl.EnableAutoSignOn">
            <summary>
            Get the value of private member variable enableAutoSignOn.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedControl.IsNavigating">
            <summary>
            Could be used to indicate an application is changing its state.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedControl.Icon">
            <summary>
            Used for hosted WinForm apps that want a simple way to set their
            icons.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedControl.OptimumSize">
            <summary>
            The size that the applications's window will initially be if it is a floating window.
            </summary>
            <remarks>
            If a HostedControl is floating and there is no OptimumSize set, the size
            of the floating window will be determined by the drawn size of the hosted control.
            </remarks>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedControl.CanEmbed">
            <summary>
            Returns true if the application can be hosted within the UII panels.
            False if the application can only be integrated with UII via scripts.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedControl.AgentID">
            <summary>
            Useful for management apps that need to know who is logged into them.
            This is used for apps supporting the IHostedApplication2 interface.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedControl.IsGlobal">
            <summary>
            Tells whether the hosted application is global
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedControl.IsTagged">
            <summary>
            When true, application is dependent on workflow
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedControl.SessionManager">
            <summary>
            Allows hosted apps to have access to sessions
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedControl.IsListed">
            <summary>
            Allows to be seen but not listed in SessionExplorer or CurrentSessionUI 
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedControl.ImplementedAsCcf20">
            <summary>
            Allows system to run certain routines as CCF 2.0 or prior
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedControl.ApplicationName">
            <summary>
            Returns the name of the hosted application as given in the database.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedControl.ApplicationID">
            <summary>
            Returns the unique id for this hosted application.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedControl.DisplayGroup">
            <summary>
            The name of the UII panel this application is hosted within.
            This is taken from the database Application table initialization XML.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedControl.AppHostWorkItem">
            <summary>
            For CAB integration purposes only; allows injection of current WorkItem
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedControl.IsDynamic">
            <summary>
            Gets or sets a value indicating whether this instance is dynamic.
            </summary>
            <value>
            	<c>true</c> if this instance is dynamic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControl.#ctor">
            <summary>
            Hosted Control constructor
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControl.#ctor(System.Guid,System.String,System.String)">
            <summary>
            Hosted Control constructor
            </summary>
            <param name="appID"> The Application ID for the control.</param>
            <param name="appName"> The name of the Application/</param>
            <param name="initString">Initialization string used to set the control.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControl.InitializeComponent">
            <summary>
            Initialize the the control.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControl.HandleStateChanged(System.Object,Microsoft.Practices.CompositeUI.StateChangedEventArgs)">
            <summary>
            Event handler for when the WorkItem state (Context) has changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControl.DoAction(Microsoft.Uii.Csr.RequestActionEventArgs)">
            <summary>
            Method to override in the implementation to handle the action.
            </summary>
            <param name="args">The event arguments for request action event</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControl.NotifyContextChange(Microsoft.Uii.Csr.Context)">
            <summary>
            Event which happens whenever the context is changed.
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControl.FireChangeContext(Microsoft.Uii.Csr.ContextEventArgs)">
            <summary>
            Informs all the other applications that the context has changed.
            </summary>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControl.Initialize">
            <summary>
            Called when the application should initialize its internal state
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControl.AddImplicitAction(System.String)">
            <summary>
            Adds implicit action . Action Id will use the maximum available int . 
            </summary>
            <param name="actionName"></param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControl.Close">
            <summary>
            Called when the app is closed.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControl.SessionChange(System.Boolean,System.Guid)">
            <summary>
            Called for global applications when the session is activated or deactivated
            Not called for non-global applications.
            </summary>
            <param name="activate">true for session being activated</param>
            <param name="sessionID">ID of the affected session.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControl.ErrorMsg(System.String,System.String)">
            <summary>
            So hosted winform applications can use this and have the same error message
            style as the rest of the desktop.
            </summary>
            <param name="msg">Message containing information about the error.</param>
            <param name="advanced">Extra nmessage information containing information about the error.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControl.AddAction(System.Int32,System.String,System.String)">
            <summary>
            Adds an action for use from one application or the UII core to this
            application.
            An action with id of 1 is the default action and is called when initing
            the application.  There is no requirement to have a default action though.
            </summary>
            <param name="id">ID of the action.</param>
            <param name="name">Name of the action.</param>
            <param name="initialization">Initialization</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControl.HandleRequestDefaultAction(System.Object,Microsoft.Practices.CompositeUI.Utility.DataEventArgs{Microsoft.Uii.Csr.ApplicationProperties})">
            <summary>
            This is for internal UII use only.  Please do not use directly.  Public visibility necessary for CAB integration.
            </summary>
            <param name="sender">sender</param>
            <param name="applicationType">ApplicationType</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControl.DoDefaultAction">
            <summary>
            Performs this hosted application's default action, if there is one.  The
            default action is the one with an id of 1, but it is not required.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControl.DoAction(System.Int32,System.String)">
            <summary>
            Called to perform the action configured in the database.
            Do not override this method! To handle DoAction in your implementation override 
            DoAction(RequestActionEventArgs) instead.
            </summary>
            <remarks>
            This method is for internal UII use only, don't override this method.
            To handle DoAction override DoAction(RequestActionEventArgs) instead.
            </remarks>
            <param name="actionID">Action ID</param>
            <param name="data">Action Data</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControl.FireRequestAction(Microsoft.Uii.Csr.RequestActionEventArgs)">
            <summary>
            Sends a request to perform some action to another application.
            If the RequestActionEventArgs has a target of *, then all apps get the action.
            </summary>
            <param name="args">Event arguments for request action event</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControl.HandleRequestAction(System.Object,Microsoft.Uii.Csr.RequestActionEventArgs)">
            <summary>
            This is for internal UII use only.  Please do not use directly.  Public visibility necessary for CAB integration.
            </summary>
            <param name="sender">Event Sender</param>
            <param name="args">Event argument for request action event</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControl.GetIconList">
            <summary>
            Gets the icon images
            </summary>
            <returns>ImageList containing Icons</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControl.GetStateData">
            <summary>
            Gets the application state data for the windows application
            For now we retrieve only the InputText value
            </summary>
            <returns>string containing xml with state data</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControl.SetStateData(System.String)">
            <summary>
            Sets the StateData to the controls
            </summary>
            <param name="stateXml">contains the xml which has state data</param>
        </member>
        <member name="E:Microsoft.Uii.Csr.HostedControl.RequestAction">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.HostedControl.ActionCompleted">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControl.SetContext(System.String)">
            <summary>
            This is used to set the context from applicationhost without causing
            further notifications.  It exists so that context can be updated quietly
            before doing the 'real' context notification because some applications
            fire actions onto other apps when the context changes and some actions
            are designed to depend upon context.  In otherwords, a race condition.
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControl.SetContext(Microsoft.Uii.Csr.Context)">
            <summary>
            This is used to set the context from applicationhost without causing
            further notifications.  It exists so that context can be updated quietly
            before doing the 'real' context notification because some applications
            fire actions onto other apps when the context changes and some actions
            are designed to depend upon context.  In otherwords, a race condition.
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControl.NotifyContextChange(System.String)">
            <summary>
            Event which happens whenever the context is changed.  This is called by
            the applicationHost
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControl.DoAction(System.String,System.String)">
            <summary>
            Called to perform the action configured in the database.
            </summary>
            <param name="actionName">Action Name</param>
            <param name="data">Data</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControl.DoAction(Microsoft.Uii.Csr.Action,System.String)">
            <summary>
            Method to override in the implemention to handle the action.
            </summary>
            <param name="action">Action</param>
            <param name="data">Data</param>
            <remarks>
            This really ought to be an abstract method, but then the UI designer won't
            work for the inherited classes.
            </remarks>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControl.AuditLogData(Microsoft.Uii.Csr.RequestActionEventArgs,System.DateTime)">
            <summary>
            AuditLoggerData
            </summary>
            <param name="args"></param>
            <param name="startTime"></param>
        </member>
        <member name="T:Microsoft.Uii.Csr.IHostedApplicationEx">
            <summary>
            IHostedApplicationEx extends the IHostedApplication3 so that older apps
            are unaffected but newer apps can integrate more effectively with UII.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.IHostedApplicationEx.Cti">
            <summary>
            Telephony Provider
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.IHostedApplicationEx.AgentLine">
            <summary>
            Lineclass Provider
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.HostedControlEx">
            <summary>
            This makes it easier to create WinForm applications by wrapping the most common
            operations into a base class.
            
            It would be better to make this an abstract class and have the DoAction( Action )
            method also be abstract.  However doing so causes the VS 2003 UI designer to not
            allow drag-n-drop layout which most people will want.  Thus, the obvious abstract-ness
            of this class is not being coded.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControlEx.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedControlEx.#ctor(System.Guid,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="appID">Application ID</param>
            <param name="appName">Application Name</param>
            <param name="initString">Initialize</param>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedControlEx.Cti">
            <summary>
            Telephony member for controlling phones and calls
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedControlEx.AgentLine">
            <summary>
            This is the agent's phone when using CTI
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.HostedWebApplication">
            <summary>
            Classes to handle web applications (HTML, ASP, etc) within UII.
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.HostedWebApplication.webBrowser">
            <summary>
            An instance of the WebBrowserExtended object
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.HostedWebApplication.webActions">
            <summary>
            Dictionary of actions
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.HostedWebApplication.webActionsByID">
            <summary>
            Dictionary of actions
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedWebApplication.HostedApplicationAdapter">
            <summary>
            Application adapter instance for the external application, if so configured.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedWebApplication.WebAppAdapter">
            <summary>
            Web Application adater instance for the web applications.
            For Internal Use. 
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.HostedWebApplication.IID_INTERNET_EXPLORER">
            <summary>
            Class ID for Internet Explorer
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.HostedWebApplication.IE_COM_ERROR_CODE">
            <summary>
            Internet Explorer COM exception error code when Internet Explorer crashes.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.HostedWebApplication.RequestActionEvent">
            <summary>
            Event to request an action of another application to be invoked.
            Using CAB's EventBroker to publish the DoAction event topic.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.HostedWebApplication.ActionCompletedEvent">
            <summary>
            Event to notify ApplicationHost that an action has completed.
            Using CAB's EventBroker to publish the event topic.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.HostedWebApplication.RequestActionStatusEvent">
            <summary>
            Event to notify ApplicationHost of action status.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.HostedWebApplication.ChangeContext">
            <summary>
            Change context event handler.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedWebApplication.ApplicationHost">
            <summary>
            Intended to provide access to the containing ApplicationHost instance to support advanced hosting senarios.
            Usage may increase coupling between AIF hosted applications, running counter to the architectural intent of AIF.
            Setter is for internal use only, it will have no effect.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedWebApplication.AppHostWorkItem">
            <summary>
            For CAB integration purposes only; allows injection of current WorkItem
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedWebApplication.IsDynamic">
            <summary>
            Gets or sets a value indicating whether this instance is dynamic.
            </summary>
            <value>
            	<c>true</c> if this instance is dynamic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.#ctor(System.Guid,System.String,System.String)">
            <summary>
            Constructor for HostedWebApplication
            </summary>
            <param name="appID">Application ID</param>
            <param name="appName">Application Name</param>
            <param name="initString">Initialization string</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.loadAdapter(System.Xml.XmlDocument)">
            <summary>
            Loads an adapter (if any) to modify the web application behavior.
            </summary>
            <param name="initstring">application initstring</param>
            <returns>The adapter to use, or null.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.adapter_AdapterContextChangedEvent(Microsoft.Uii.Csr.Context)">
            <summary>
            Event handler which is run when an adapter needs to notify UII of new
            context information.
            </summary>
            <param name="newContext">New Context XML</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.adapter_AdapterRequestActionEvent(System.String,System.String,System.String)">
            <summary>
            Used when an adapter requests that an action be done on an application.
            </summary>
            <param name="appName">Application Name</param>
            <param name="actionName">Name of the Action</param>
            <param name="data">Data as customized by SI and/or GetFocus information.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.adapter_AdapterFireRequestActionEvent(Microsoft.Uii.Csr.RequestActionEventArgs)">
            <summary>
            Used when an adapter requests that an action be done on an application.
            </summary>
            <param name="args">The event arguments</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.SubstituteQueryString(System.String)">
            <summary>
            Inserts a value from the context into a query string where the query string
            specifies it by using the syntax %valuename.
            </summary>
            <param name="queryString">String used for Query</param>
            <returns>The query string, updated with context information is appropriate.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.SubstituteQueryString(System.String,System.Boolean)">
            <summary>
            Inserts a value from the context into a query string where the query string
            specifies it by using the syntax %valuename.
            </summary>
            <param name="queryString">String used for Query</param>
            <param name="encodeData">Encode the data.</param>
            <returns>The query string, updated with context information is appropriate and possibly
            encoded.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.webBrowser_Navigated(System.Object,System.Windows.Forms.WebBrowserNavigatedEventArgs)">
            <summary>
            Called whenever a navigation completes.  A web page with many frames
            can have this fire multiple times.
            </summary>
            <param name="sender">Object Sender</param>
            <param name="e">Event Class object e</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.webBrowser_DocumentCompleted(System.Object,System.Windows.Forms.WebBrowserDocumentCompletedEventArgs)">
            <summary>
            Occurs when the WebBrowser control finishes loading a document. 
            </summary>
            <param name="sender">Object Sender</param>
            <param name="e">Event Class object e</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.initializeAdapter(Microsoft.Uii.Csr.HostedApplicationAdapter)">
            <summary>
            Initialize the adapter
            </summary>
            <param name="adapter"></param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.HandleStateChanged(System.Object,Microsoft.Practices.CompositeUI.StateChangedEventArgs)">
            <summary>
            Event handler for when the WorkItem state (Context) has changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.HandleRequestDefaultAction(System.Object,Microsoft.Practices.CompositeUI.Utility.DataEventArgs{Microsoft.Uii.Csr.ApplicationProperties})">
            <summary>
            Event handler for default action
            This is for internal UII use only.  Please do not use directly.  Public visibility necessary for CAB integration.
            </summary>
            <param name="sender">sender</param>
            <param name="applicationType">ApplicationType</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.HandleRequestAction(System.Object,Microsoft.Uii.Csr.RequestActionEventArgs)">
            <summary>
            This is for internal UII use only.  Please do not use directly.  Public visibility necessary for CAB integration.
            </summary>
            <param name="sender">sender</param>
            <param name="args">arguments</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.UpdateContextValue(System.String,System.String)">
            <summary>
            Accepts a name and value pair and adds or updates it if it currently exists
            to the current context.
            
            This is public so it can be called via scripts as well.
            </summary>
            <param name="name">Key (name) of the context item to update.</param>
            <param name="val">Value of the context item to update.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.UpdateContextValue(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Accepts a Dictionary collection of keys and values and adds them 
            (or updates it if it currently exists) to the current context.
            Then notify other apps the context has changed.
            </summary>
            <param name="contextValues">Context values used for update.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.GetContextValue(System.String)">
            <summary>
            Returns the value associated with the name-value pair in the
            context.
            </summary>
            <param name="name">Name of the context key.</param>
            <returns>The context value for the passed name or null.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.Focus">
            <summary>
            Gives the focus to the hosted Web application
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.InitializeClosing">
            <summary>
            This Method is called before closing a hosted web application
            to perform required actions on web browser to close.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.SetContext(System.String)">
            <summary>
            This is used to set the context from applicationhost without causing
            further notifications.  It exists so that context can be updated quietly
            before doing the 'real' context notification because some applications
            fire actions onto other apps when the context changes and some actions
            are designed to depend upon context.  In otherwords, a race condition.
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="E:Microsoft.Uii.Csr.HostedWebApplication.ActionCompleted">
            <summary>
            Action Completed event handler.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.HostedWebApplication.RequestAction">
            <summary>
            Request Action event handler.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedWebApplication.IsGlobal">
            <summary>
            Tells whether the hosted application is global
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedWebApplication.IsTagged">
            <summary>
            When true, application is dependent on workflow
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedWebApplication.SessionManager">
            <summary>
            Allows hosted apps to have access to the session manager object
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedWebApplication.IsListed">
            <summary>
            Allows to be seen but not listed in SessionExplorer or CurrentSessionUI 
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedWebApplication.ImplementedAsCcf20">
            <summary>
            Allows system to run certain routines as CCF 2.0 or prior
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.SetContext(Microsoft.Uii.Csr.Context)">
            <summary>
            This is used to set the context from ApplicationHost without causing
            further notifications.  It exists so that context can be updated quietly
            before doing the 'real' context notification because some applications
            fire actions onto other apps when the context changes and some actions
            are designed to depend upon context.  In other words, a race condition.
            </summary>
            <param name="context">Context object</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.FireRequestAction(Microsoft.Uii.Csr.RequestActionEventArgs)">
            <summary>
            Sends a request to perform some action to another application.
            If the RequestActionEventArgs has a target of *, then all apps get the action.
            </summary>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.NotifyContextChange(Microsoft.Uii.Csr.Context)">
            <summary>
            Notify the application that the context changed
            </summary>
            <param name="context">contex object</param>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedWebApplication.Context">
            <summary>
            Gets and Sets the context for the web application.  This can
            be used by scripts.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedWebApplication.AgentCreds">
            <summary>
            Get the agent credentials for this application
            Changed the return type to System.ComponentModel.BindingList
            in the process of Migrating Web Service to WCF service.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedWebApplication.TopLevelWindow">
            <summary>
            Returns the control which represents the browser
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedWebApplication.MinimumSize">
            <summary>
            The minimum size for an application's window
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedWebApplication.OptimumSize">
            <summary>
            The size that the applications's window will initially be if it is a floating window.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedWebApplication.ApplicationName">
            <summary>
            Returns the name of the hosted application as given in the database.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedWebApplication.ApplicationID">
            <summary>
            The unique ID for the application as given in the database definitions.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedWebApplication.DisplayGroup">
            <summary>
            Get the display group.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedWebApplication.CanEmbed">
            <summary>
            Returns true if the application can be hosted within the UII panels.
            False if the application can only be integrated with UII via scripts.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedWebApplication.IsNavigating">
            <summary>
            Returns a true if the application is still navigating to a page.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedWebApplication.Icon">
            <summary>
            Used to indicate the preferred icon to use
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedWebApplication.HostInside">
            <summary>
            True when either <hostInside/> or <hostOnTop/> have been configured.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.NotifyContextChange(System.String)">
            <summary>
            Handle the change in the context.
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.DoAction(System.String,System.String)">
            <summary>
            Perform the given action on the application.
            </summary>
            <param name="actionName">Action Name</param>
            <param name="data">Data that is specified by 
            or read in from a file.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.Initialize">
            <summary>
            This must be called before any actions are done on the hosted web application.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.Close">
            <summary>
            Closes the web application and any adapter it may be using.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.SessionChange(System.Boolean,System.Guid)">
            <summary>
            Called for global applications when the session is activated or deactivated
            </summary>
            <param name="activate">true for session being activated</param>
            <param name="sessionID">ID of the affected session.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.GetIconList">
            <summary>
            Gets the icon images
            </summary>
            <returns>ImageList containing the Icons</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.GetStateData">
            <summary>
            Gets the application state data for the Web application
            For now we retrieve only the URL value
            </summary>
            <returns>String containing xml with state data</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.SetStateData(System.String)">
            <summary>
            Set the application to the state provided in the xml string.
            </summary>
            <param name="stateXml">contains the state data for the application</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.AddAction(System.Int32,System.String,System.String)">
            <summary>
            Used at initialization time to create the list of actions that may be performed.
            </summary>
            <param name="id">ID</param>
            <param name="name">Name</param>
            <param name="initialization">Initialization</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.DoAction(System.Int32,System.String)">
            <summary>
            Performs the indicated action on a web app using the passed data.
            </summary>
            <param name="actionID">Action ID</param>
            <param name="data">Data</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.DoDefaultAction">
            <summary>
            DoDefaultAction : navigates to the saved page or homepage specified
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.FireDefaultAction(System.Object,Microsoft.Uii.Csr.Browser.Web.DocumentCompleteEventArgs)">
            <summary>
            Fires the default aciton on a web aplication after the page has been loaded completely
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.DoAction(Microsoft.Uii.Csr.RequestActionEventArgs)">
            <summary>
            Perform an action on a web app using the passed arguments.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.ChangeContextFromScript">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.RequestActionFromScript(Microsoft.Uii.Csr.RequestActionEventArgs)">
            <summary>
            Request Action
            </summary>
            <param name="eventArgs">Event Arguments</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.ActionCompletedFromScript(Microsoft.Uii.Csr.ActionEventArgs)">
            <summary>
            Action is completed from script
            </summary>
            <param name="eventArgs">Event Arguments</param>
        </member>
        <member name="T:Microsoft.Uii.Csr.HostedWebApplication.WebAction">
            <summary>
            Actions for hosted web applications.
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.HostedWebApplication.WebAction.ActionType">
            <summary>
            Moved enum into ActionType to encapsulate more effectively
            for code outside this module such as the adapters.
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.HostedWebApplication.WebAction.ActionType.None">
            <summary>
            No action
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.HostedWebApplication.WebAction.ActionType.URL">
            <summary>
            Navigate to Url
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.HostedWebApplication.WebAction.ActionType.SCRIPT">
            <summary>
            Exectute script
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.HostedWebApplication.WebAction.HttpVerb">
            <summary>
            Moved enum into ActionType to encapsulate more effectively
            for code outside this module such as the adapters. 
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.HostedWebApplication.WebAction.HttpVerb.GET">
            <summary>
            Perform Http GET
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.HostedWebApplication.WebAction.HttpVerb.POST">
            <summary>
            Perform Http POST
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedWebApplication.WebAction.GetFocus">
            <summary>
            The GetFocus is used to help decide if the application should obtain
            focus when the action is fired.
            Set this property by checking the GetFocus checkbox which is located at:
            	1) Admin Console->Hosted Applications->[someapplication]
            	2) Properties menu->Actions tab
            	3) Edit Initialization String->Action->Build button
            	4) "Focus the application after action is completed." checkbox
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedWebApplication.WebAction.Type">
            <summary>
            Get the type the web action (e.g. None, URL, or SCRIPT).
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedWebApplication.WebAction.Verb">
            <summary>
            Get the verb of the web action (e.g. GET or POST).
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedWebApplication.WebAction.Url">
            <summary>
            Get the Url of the web action.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedWebApplication.WebAction.QueryString">
            <summary>
            Get the query string.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedWebApplication.WebAction.ScriptPath">
            <summary>
            Get the path of the script.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedWebApplication.WebAction.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="id">ID</param>
            <param name="name">Name</param>
            <param name="initString">String Initialization</param>
        </member>
        <member name="T:Microsoft.Uii.Csr.IHostedApplicationMultichannel">
            <summary>
            Interface for the hostedapplications operations 
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.IHostedApplicationMultichannel.Open(System.String)">
            <summary>
            Opens Chat Session between Operator and the user who is waiting in the Queue
            </summary>
            <remarks>The sessionID may need to be converted for each channel as the data type is unknown.</remarks>
            <param name="sessionID">The key used to open a connection the channel.</param>
            <returns>A boolean is returned indicating success or failure.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.IHostedApplicationMultichannel.Close(System.String)">
            <summary>
            Closes the Chat Session between the Agent and the User on that particular Chat Session
            </summary>
            <remarks>The sessionID may need to be converted for each channel as the data type is unknown.</remarks>
            <param name="sessionID">The key used to open a connection the channel.</param>
            <returns>A boolean is returned indicating success or failure.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.IHostedApplicationMultichannel.Conference(System.String,System.String)">
            <summary>
            Adds another agent/expert/supervisor to ongoing Chat Session
            </summary>
            <remarks>The sessionID may need to be converted for each channel as the data type is unknown.</remarks>
            <param name="sessionID">The key used to open a connection the channel.</param>
            <param name="newPartyUri">The URI indicating the party to add to the conference.</param>
            <returns>A boolean is returned indicating success or failure.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.IHostedApplicationMultichannel.Transfer(System.String,System.String)">
            <summary>
            Transfers current chat session to another Agent/Expert
            </summary>
            <remarks>The sessionID may need to be converted for each channel as the data type is unknown.</remarks>
            <param name="sessionID">The key used to open a connection the channel.</param>
            <param name="newPartyUri">The URI indicating the party to add to the conference.</param>
            <returns>A boolean is returned indicating success or failure.</returns>
        </member>
        <member name="T:Microsoft.Uii.Csr.IScriptableHostedApp">
            <summary>
            Host application that has scripting support
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.IScriptableHostedApp.LoadScript(System.String)">
            <summary>
            Loads the Script for the hosted application. 
            </summary>
            <param name="scriptName"></param>
        </member>
        <member name="T:Microsoft.Uii.Csr.Providers.ExtendedApplicationProvider">
            <summary>
            This class contains the the (abstract) provider definition for extra application types.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.Providers.ExtendedApplicationProvider.#ctor(System.String)">
            <summary>
            Provider constructor.
            </summary>
            <param name="initializer">Not used...</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Providers.ExtendedApplicationProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initialize the provider's name and other properties based on the configuration values. 
            </summary>
            <param name="name">The name of the provider.</param>
            <param name="configValue">The collection of configuration attributes in the configuration node.</param>
        </member>
        <member name="P:Microsoft.Uii.Csr.Providers.ExtendedApplicationProvider.ProviderName">
            <summary>
            The name of the provider.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Providers.ExtendedApplicationProvider.ConfigValue">
            <summary>
            The collection of configuration attributes in the configuration node.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.Providers.ExtendedApplicationProvider.CreateExtendedApplication(Microsoft.Uii.Common.Entities.ApplicationRecord)">
            <summary>
            Abstract method for the provider to implement to create/run their applications.
            </summary>
            <param name="application">Application record containing information about the application being created/run.</param>
            <returns>IHostedApplication3 interface of the create/run application.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.Providers.ExtendedApplicationProvider.CreateExtendedApplication(Microsoft.Uii.Common.Entities.ApplicationRecord,System.Guid)">
            <summary>
            Abstract method for the provider to implement to create/run their application.
            </summary>
            <param name="application">Application record containing information about the application being created/run.</param>
            <param name="applicationID">Application ID used to identiy which application host owns the
            extended application.</param>
            <returns>IHostedApplication3 interface of the create/run application.</returns>
        </member>
        <member name="T:Microsoft.Uii.Csr.HostedAppFactory">
            <summary>
            This class hold methods to create hosted applications on various levels of isolation.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.HostedAppFactory.HostedAppCallTimeout">
            <summary>
             Timeout value property of the Hosted Application
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedAppFactory.#cctor">
            <summary>
            Static intializer. Initializes the remoting configuration, RegistrationListener object.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedAppFactory.CreateApplication(Microsoft.Uii.Common.Entities.ApplicationRecord,Microsoft.Practices.CompositeUI.WorkItem)">
            <summary>
            Creates Hosted Application. Based on the isolation level, launches the Hosted Application
            in the same domain or different domain or different process.
            </summary>
            <param name="appRecord">Application Record.</param>
            <returns>Hosted Application created. Null, if the hosted application creation fails.</returns>
            <param name="workItem"></param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedAppFactory.LaunchAppProcess(System.String,Microsoft.Uii.Common.Entities.ApplicationRecord,System.String)">
             <summary>
             Spawns a new process for loading the Isolation application Level 2.
             </summary>
             <param name="appKey">A unique identifier for the application.</param>
             <param name="appRecord">Application Record having application details.</param>
             <param name="listenerUrl">Registration Listener URL for registering the hosted application.</param>
            <returns name="process">Returns Process</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedAppFactory.CreateApplication(Microsoft.Uii.Common.Entities.ApplicationRecord)">
            <summary>
            Creates Hosted Application. Based on the isolation level, launches the Hosted Application
            in the same domain or different domain or different process.
            </summary>
            <param name="appRecord">Application Record.</param>
            <returns>Hosted Application created. Null, if the hosted application creation fails.</returns>
        </member>
        <member name="T:Microsoft.Uii.Csr.HostedAppDomainData">
            <summary>
            Data class used for passing the data to the Application Domain Thread procedure.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedAppDomainData.SerializeAppRecord(Microsoft.Uii.Common.Entities.ApplicationRecord)">
            <summary>
            Serializes the Application record into a XML.
            </summary>
            <param name="appRecord">ApplicationRecord</param>
            <returns>Deserialized ApplicationRecord object.</returns>
        </member>
        <member name="T:Microsoft.Uii.Csr.HostedAppLauncher">
            <summary>
            Summary description for HostedAppLauncher.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedAppLauncher.CreateApplication(Microsoft.Uii.Common.Entities.ApplicationRecord)">
            <summary>
            Create a new hosted application.
            </summary>
            <param name="app">The name of the Application to be created</param>
            <returns>An instance of a hosted app or null if it fails</returns>
            <remarks>
            See CreateUnknownApplication for information on working with 3rd Party developer tools.
            </remarks>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedAppLauncher.LaunchNonIsolatedHostedApp(Microsoft.Uii.Common.Entities.ApplicationRecord)">
            <summary>
            Creates the application non-isolated, i.e., the application runs in the default domain of
            Agent Desktop.
            </summary>
            <param name="app">Application record.</param>
            <returns>Hosted application created.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedAppLauncher.CreateWinFormApplication(Microsoft.Uii.Common.Entities.ApplicationRecord)">
            <summary>
            Create a new UII WinForm (HostedControl) based application.
            </summary>
            <param name="app">Application name.</param>
            <returns>New hosted application.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedAppLauncher.LaunchNonIsolatedHostedApp(Microsoft.Uii.Common.Entities.ApplicationRecord,Microsoft.Practices.CompositeUI.WorkItem)">
            <summary>
            Creates the application non-isolated, i.e., the application runs in the default domain of
            Agent Desktop.
            </summary>
            <param name="app">Application record.</param>
            <param name="workItem">ApplicationHost workItem</param>
            <returns>Hosted application created.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedAppLauncher.DeserializeAppRecord(System.String)">
            <summary>
            Deserializes the Xmled Application record into a ApplicationRecord object.
            </summary>
            <param name="appRecordXml">Serialized ApplicationRecord</param>
            <returns>Deserialized ApplicationRecord object.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedAppLauncher.HandleAppCreatedEventHandler(System.Object,System.EventArgs)">
            <summary>
            Handles the Load event of the hosted application. And creates an HostedAppAdapter
            for this particular hosted application and passes to the RegistrationListener.
            </summary>
            <param name="sender">Hosting Form</param>
            <param name="e">event argss</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedAppLauncher.CreateApplication(Microsoft.Uii.Common.Entities.ApplicationRecord,Microsoft.Practices.CompositeUI.WorkItem)">
            <summary>
            Create a new hosted application.
            </summary>
            <param name="app">The name of the Application to be created</param>
            <param name="workItem">ApplicationHost workItem</param>
            <returns>An instance of a hosted app or null if it fails</returns>
            <remarks>
            See CreateUnknownApplication for information on working with 3rd Party developer tools.
            </remarks>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedAppLauncher.CreateWinFormApplication(Microsoft.Uii.Common.Entities.ApplicationRecord,Microsoft.Practices.CompositeUI.WorkItem)">
            <summary>
            Create a new UII WinForm (HosstedControl) based application.
            </summary>
            <param name="app"></param>
            <param name="workItem"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedAppLauncher.CreateWebApplication(Microsoft.Uii.Common.Entities.ApplicationRecord)">
            <summary>
            Create a new UII web application.
            </summary>
            <param name="app">Application name.</param>
            <returns>New hosted application.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedAppLauncher.CreateExternalApplication(Microsoft.Uii.Common.Entities.ApplicationRecord)">
            <summary>
            Create a new UII external application.
            </summary>
            <param name="app">Application name.</param>
            <returns>New hosted application.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostedAppLauncher.CreateExtendedApplication(Microsoft.Uii.Common.Entities.ApplicationRecord)">
            <summary>
            Creates a type of application that is not known to the base UII classes.
            Implementors should use the provider patterns to create their 
            own application types.
            </summary>
            <param name="app">Application record containing application information.</param>
            <returns>New hosted application.</returns>
            <remarks>
            Used for 3rd party application developer tools.  Using the provider pattern
            the tools can create applications that will be called out to from here.
            </remarks>
        </member>
        <member name="T:Microsoft.Uii.Csr.HostingForm">
            <summary>
            This WinForm hosts the Windows Control of hosted application of type Hosted Windows Control and
            axWebBrowser of Hosted Web Application.
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.HostingForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostingForm.#ctor">
            <summary>
            Default Constructor for Hosting Form
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostingForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">Whether to dispose components.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostingForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.HostingForm.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Stops the user from closing the form with Alt+F4
            </summary>
            <param name="msg">Message</param>
            <param name="keyData">KeyData</param>
            <returns>Processed?</returns>
        </member>
        <member name="T:Microsoft.Uii.Csr.AifInterfaces">
            <summary>
            These are the various interfaces that are implemented by Hosted Applications
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.AifInterfaces.IHostedApplication">
            <summary>
            IHostedApplicatin Interface
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.AifInterfaces.IHostedApplication2">
            <summary>
            IHostedApplication2 Interface
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.AifInterfaces.IHostedApplicationEx">
            <summary>
            IHostedApplicationEx Interface
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.AifInterfaces.IAutoSignOn">
            <summary>
            Not Used
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.AifInterfaces.ISingleSignOnApp">
            <summary>
            Not Used
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.AifInterfaces.IHostedApplication3">
            <summary>
            IHostedApplication3 Interface
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.FormSelectedEventHandler">
            <summary>
            This delegate handles the Selected form event handler
            </summary>
            <param name="app">IHostedAppUICommand object</param>
            <param name="args">EventArgs object</param>
        </member>
        <member name="T:Microsoft.Uii.Csr.IHostedAppUICommand">
            <summary>
            Interface for Isolated and extended applications.
            </summary>
            <remarks>
            This interface is to be used only for Isolated or extended applications.
            </remarks>
        </member>
        <member name="P:Microsoft.Uii.Csr.IHostedAppUICommand.IsExtended">
            <summary>
            Get a boolean indicating if the application is extended.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.IHostedAppUICommand.IsIsolated">
            <summary>
            Get a boolean indicating if the application is isolated.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.IHostedAppUICommand.ImplementedInterfaces">
            <summary>
            Get the UII interfaces
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.IHostedAppUICommand.SetFormPosition(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the forms position.
            </summary>
            <param name="top">Set the top position of the form.</param>
            <param name="left">Set the left position of the form.</param>
            <param name="height">Set the height of the form.</param>
            <param name="width">Set the width of the form.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.IHostedAppUICommand.ShowForm">
            <summary>
            Show the form.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.IHostedAppUICommand.SetFocus">
            <summary>
            Set the focus of the form
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.IHostedAppUICommand.HideForm">
            <summary>
            Hide the form.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.IHostedAppUICommand.FormSelected">
            <summary>
            The event fired when the form is selected.
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.AuditLog">
            <summary>
            AuditLog provides services for logging the audit related messages.
            It caches the messages before updating the DB.
            It uses asynchronous calls to web services.
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.AuditLog.AuditFlagLogin">
            <summary>
            The default set of audit flags
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.AuditLog.AuditFlagSession">
            <summary>
            The default set of audit flags
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.AuditLog.AuditFlagAgentState">
            <summary>
            The default set of audit flags
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.AuditLog.AuditFlagHostedApplication">
            <summary>
            The default set of audit flags
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.AuditLog.AuditFlagAction">
            <summary>
            The default set of audit flags
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.AuditLog.AuditFlagWorkFlow">
            <summary>
            The default set of audit flags
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.AuditLog.AuditFlagNonHostedApplication">
            <summary>
            The default set of audit flags
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.AuditLog.AuditFlagInteraction">
            <summary>
            The default set of audit flags
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.AuditLog.CacheMaxSize">
            <summary>
            Maximum size of the the Audit Log cache.
            Size change will take effect on next Log() call.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.AuditLog.NoCache">
            <summary>
            Indicates whether audit messages to be cached or not.
            If true, no caching happens and all the messages will be
            logged immediately. If false, messages are cached and
            flushed to DB when the cache limit reached or certain
            events happen such as session close.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.AuditLog.GetAuditFlag(System.String)">
            <summary>
            Retrieves the value for the specified audit flag.
            </summary>
            <param name="auditFlagName">Arbitrary audit flag identifier</param>
            <returns>flag value (0 = logging off, 1 = logging on</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.AuditLog.SetAuditFlag(System.String,System.String)">
            <summary>
            Sets the value for the specified audit flag.
            </summary>
            <param name="auditFlagName">Arbitrary audit flag identifier</param>
            <param name="auditFlagValue">0 = turn off logging, 1 = turn on logging</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.AuditLog.Log(Microsoft.Uii.Common.Entities.AuditType,Microsoft.Uii.Common.Entities.LogData)">
            <summary>
            Logs the messages to the database using the AuditLog web service asynchronously.
            Caching done based on the NoCache property.
            This method has been deprecated, use Log(string, LogData) instead.
            </summary>
            <param name="auditType">Type of Audit Activity</param>
            <param name="logData">Data to log</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.AuditLog.Log(System.String,Microsoft.Uii.Common.Entities.LogData)">
            <summary>
            Logs the messages to the database using the AuditLog web service asynchronously.
            Caching done based on the NoCache property.
            Message will be logged only if GetAuditFlag(auditFlagName) returns non-zero.
            Use SetAuditFlag(auditFlagName) to set.
            </summary>
            <param name="auditFlagName">Arbitrary audit flag identifier</param>
            <param name="logData">Audit log record where ToString() will be used to extract contents</param>
        </member>
        <member name="T:Microsoft.Uii.Csr.AifDeckControl">
            <summary>
            Implements a control that shows hosted applications layered as in a deck.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.AifDeckControl.Count">
            <summary>
            Get the number of hosted applications shown on the control.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.AifDeckControl.HostedApplications">
            <summary>
            Get the collection of hosted applications currently contained in the control.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.AifDeckControl.ShowApplication(System.Object,System.Boolean)">
            <summary>
            Show the control in a new tab.
            </summary>
            <param name="application">The application to show</param>
            <param name="closable">True if the application is closable via the UI,
            false otherwise</param>
            <returns>An instance of AifDeskControl</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.AifDeckControl.RemoveApplication(System.Object)">
            <summary>
            Remove the application from the control.
            </summary>
            <param name="application">The appliation to remove</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.AifDeckControl.IsClosableApplication(System.Object)">
            <summary>
            Check if this application can be closed via the UI.
            </summary>
            <param name="application">Application Object</param>
            <returns>true if the application is closable</returns>
        </member>
        <member name="T:Microsoft.Uii.Csr.BaseWorkItem">
            <summary>
            This class allows us to get a hold of the RootWorkItem
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.AifShellBase`1">
            <summary>
            This class is use to support an application that uses a Windows Forms Form as its shell.
            </summary>
            <typeparam name="TShell">T</typeparam>
        </member>
        <member name="P:Microsoft.Uii.Csr.AifShellBase`1.DesktopShell">
            <summary>
            Returns the shell that was created.
            Will not be valid until after the shell has been created.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.AifShellBase`1.StartApplication">
            <summary>
            Start the shell application
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.AifShellBase`1.AfterShellCreated">
            <summary>
            Called after the shell has been created.
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.AifTabControl">
            <summary>
            Implements a control that shows hosted application in a tab form.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.AifTabControl.Count">
            <summary>
            Get the number of applications shown on the control.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.AifTabControl.HostedApplications">
            <summary>
            Get the collection of hosted applications currently contained in the control.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.AifTabControl.AifTabPages">
            <summary>
            Get the collection of TabPages that the TabControl uses.
            The "Tag" value of each TabPage contains the hosted application itself
            and is used to get the hosted application when we know the TabPage.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.AifTabControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.AifTabControl.GetTabPage(System.Object)">
            <summary>
            Get a specific TabPage identify by the control it contains.
            </summary>
            <param name="control">Control which TabPage contains</param>
            <returns>Returns a TabPage or null if none found.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.AifTabControl.ShowApplication(System.Object,System.Boolean)">
            <summary>
            Show the hosted application in a new tab.
            </summary>
            <param name="application">Application to show</param>
            <param name="closeButton">True to provide a close button to close
            dynamic application, false otherwise</param>
            <returns>New Tab</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.AifTabControl.ShowApplication(System.Object,System.String,System.Drawing.Image,System.Boolean)">
            <summary>
            Show the hosted application in a new tab.  The tag of the TabPage 
            will be set with the hosted application and can be used to find the 
            application when we know the tabPage.
            </summary>
            <param name="application">The control or hosted app to be shown</param>
            <param name="text">The text for the tab</param>
            <param name="icon">The image icon for the tab</param>
            <param name="closeButton">True to provide a close button to close
            dynamic application, false otherwise</param>
            <returns>TabPage</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.AifTabControl.RemoveApplication(System.Object)">
            <summary>
            Remove the application and its tab.
            </summary>
            <param name="application">The hosted application or control to be removed</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.AifTabControl.OnClose(System.Windows.Forms.Control)">
            <summary>
            Handle to remove the smartPart from collections.
            </summary>
            <param name="smartPart"></param>
        </member>
        <member name="T:Microsoft.Uii.Csr.AifTabControl.CloseAppClickHandler">
            <summary>
            Delegate used to indicate to the UI when the user has click a 
            tab to close the application.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.AifTabControl.CloseAppClick">
            <summary>
            Event when user click on the close button on the tab
            page.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.AifTabControl.IsClosableApplication(System.Object)">
            <summary>
            Check if this application can be closed via the UI
            </summary>
            <param name="application">Application Object</param>
            <returns>true if the application is closable</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.AifTabControl.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Draws an x on the tab
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Uii.Csr.AifTabControl.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handle when clicking close on tab page
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Microsoft.Uii.Csr.AifTabControl.TabPages">
            <summary>
            Obsolete method. Not to be used
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.AifTabControl.Pages">
            <summary>
            Obsolete method. Not to be used.
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.AifWpfDeckControl">
            <summary>
            Implements a wpf control that shows hosted applications layered as in a deck.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.AifWpfDeckControl.Count">
            <summary>
            Get the number of hosted applications shown on the control.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.AifWpfDeckControl.HostedApplications">
            <summary>
            Get the collection of hosted applications currently contained in the control.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.AifWpfDeckControl.ShowApplication(System.Object,System.Boolean)">
            <summary>
            Show the control in a new tab.
            </summary>
            <param name="application">The application to show</param>
            <param name="closable">True if the application is closable via the UI,
            false otherwise</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.AifWpfDeckControl.RemoveApplication(System.Object)">
            <summary>
            Remove the application from the control.
            </summary>
            <param name="application">The appliation to remove</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.AifWpfDeckControl.IsClosableApplication(System.Object)">
            <summary>
            Check if this application can be closed via the UI.
            </summary>
            <param name="application"></param>
        </member>
        <member name="T:Microsoft.Uii.Csr.AifWpfShellBase`1">
            <summary>
            This class is used to support an application that uses a WPF window as its shell.
            </summary>
            <typeparam name="TShell">T</typeparam>
        </member>
        <member name="P:Microsoft.Uii.Csr.AifWpfShellBase`1.DesktopShell">
            <summary>
            Returns the shell that was created.
            Will not be valid until after the shell has been created.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.AifWpfShellBase`1.StartApplication">
            <summary>
            Start the shell application
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.AifWpfShellBase`1.AfterShellCreated">
            <summary>
            Called after the shell has been created.
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.AifWpfTabControl">
            <summary>
            Implements a control that shows WPF hosted application in a tab form.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.AifWpfTabControl.Count">
            <summary>
            Get the number of applications shown on the control.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.AifWpfTabControl.HostedApplications">
            <summary>
            Get the collection of hosted applications currently contained in the control.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.AifWpfTabControl.AifTabItems">
            <summary>
            Get the collection of TabItems that the CcfTabControl uses.
            The "Tag" value of each TabItem contains the hosted application itself
            and is used to get the hosted application when we know the TabItem.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.AifWpfTabControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.AifWpfTabControl.GetTabPage(System.Object)">
            <summary>
            Get a specific TabItem identify by the control it contains.
            </summary>
            <param name="control">Control which TabPage contains</param>
            <returns>Returns a TabItem or null if none found.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.AifWpfTabControl.ShowApplication(System.Object,System.Boolean)">
            <summary>
            Show the hosted application in a new tab.
            </summary>
            <param name="application">Application to show</param>
            <param name="closeButton">True to provide a close button to close
            dynamic application, false otherwise</param>
            <returns>The tabItem</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.AifWpfTabControl.ShowApplication(System.Object,System.String,System.Windows.Controls.Image,System.Boolean)">
            <summary>
            Show the hosted application in a new tab.  The tag of the TabItem 
            will be set with the hosted application and can be used to find the 
            application when we know the tabItem.
            </summary>
            <param name="application">The control or hosted app to be shown</param>
            <param name="text">The text for the tab</param>
            <param name="icon">The image icon for the tab</param>
            <param name="closeButton">True to provide a close button to close
            dynamic application, false otherwise</param>
            <returns>TabItem</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.AifWpfTabControl.RemoveApplication(System.Object)">
            <summary>
            Remove the application and its tab.
            </summary>
            <param name="application">The hosted application or control to be removed</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.AifWpfTabControl.RemoveTabItem(System.Windows.UIElement)">
            <summary>
            Remove the TabItem from the Items collection
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.AifWpfTabControl.OnSmartPartClosing(Microsoft.Practices.CompositeUI.SmartParts.WorkspaceCancelEventArgs)">
            <summary>
            Handler to remove the smartPart from collections.
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.AifWpfTabControl.CloseAppClickHandler">
            <summary>
            Delegate used to indicate to the UI when the user has click a 
            tab to close the application.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.AifWpfTabControl.CloseAppClick">
            <summary>
            Event when user click on the close button on the tab
            item.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.AifWpfTabControl.IsClosableApplication(System.Object)">
            <summary>
            Check if this application can be closed via the UI
            </summary>
            <param name="application"></param>
        </member>
        <member name="M:Microsoft.Uii.Csr.AifWpfTabControl.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Adds a close button to closable apps
            </summary>
            <param name="drawingContext">Drawing Context</param>
        </member>
        <member name="T:Microsoft.Uii.Csr.CustomerAuthentication">
            <summary>
            When a customer calls in or gets transfered in, they may not be known, may
            have a known number, or they may have had their identity verified.
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.CustomerAuthentication.NotAuthenticated">
            <summary>
            Customer is not authenticated
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.CustomerAuthentication.KnownButNotAuthenticated">
            <summary>
            Known but unauthenticated customer
            </summary>
        </member>
        <member name="F:Microsoft.Uii.Csr.CustomerAuthentication.Authenticated">
            <summary>
            Authenticated customer
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.Context">
            <summary>
            The Context class used to track contextual information, wrapped in a object.
            </summary>
            <remarks>
            Works in a manner simuliar to the ASP.Net session.  UII used to use the 
            conext in a more string oriented manner.  For backward compatibility that
            will still work but use the Context object for the framework and new
            applications.  Use the GetContext or SetConext methods or the ContextInformation
            property to transfer the context back and forth between XML and the object.
            </remarks>
        </member>
        <member name="P:Microsoft.Uii.Csr.Context.EmptyContext">
            <summary>
            Returns an empty context
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Context.ContextRoot">
            <summary>
            Get the context root value.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Context.Count">
            <summary>
            Get the number of items in the Context.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Context.ContextInformation">
            <summary>
            Gets and sets the Context with an XML context
            </summary>
            <remarks>
            This is the property interface fo rthe SetContext and GetContext methods.</remarks>
        </member>
        <member name="P:Microsoft.Uii.Csr.Context.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <remarks>If the key is missing than null is returned.</remarks>
        </member>
        <member name="M:Microsoft.Uii.Csr.Context.#ctor">
            <summary>
            Empty Constructor for Context
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.Context.#ctor(System.String)">
            <summary>
            Constructor for Context
            </summary>
            <param name="contextInformation">The context (XML) information to load into the context object.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Context.Clear">
            <summary>
            Clear the context.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.Context.SetContext(System.String)">
            <summary>
            Sets the Context with an XML context.
            </summary>
            <param name="contextInformation">The XML holding the context.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Context.GetContext">
            <summary>
            Get the XML context string from the Context.
            </summary>
            <returns>Returns the XML string from the Context.</returns>
        </member>
        <member name="T:Microsoft.Uii.Csr.ContextEventArgs">
            <summary>
            Event argument for add context event
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ContextEventArgs.Context">
            <summary>
            Readonly Context property
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ContextEventArgs.#ctor(Microsoft.Uii.Csr.Context)">
            <summary>
            Event arg for Setting the context.
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="T:Microsoft.Uii.Csr.ContextState">
            <summary>
            The class is used to maintain Contextual information
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ContextState.#ctor(Microsoft.Uii.Csr.Context)">
            <summary>
            Setting Context state information
            </summary>
            <param name="context">Context Object</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.ContextState.#ctor">
            <summary>
            Empty Constructor
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.ContextState.Modifier">
            <summary>
            The object that modified the context state.
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.Initialization">
            <summary>
            The Initialization class used to track hosted application initialization
            information, wrapped in an object.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.Initialization.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="initString">Initialization string</param>
        </member>
        <member name="P:Microsoft.Uii.Csr.Initialization.InitializationString">
            <summary>
            Get or Set the initialization string
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.Initialization.GetValue(System.String)">
            <summary>
            Returns the XmlNode that matches the XPath expression. 
            </summary>
            <param name="xpath">The xpath expression</param>
            <returns>XmlNode</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.Initialization.GetValueString(System.String)">
            <summary>
            Returns the InnerText of the XmlNode that matches the XPath expression, returns an
            empty string otherwise.
            </summary>
            <param name="xpath">xpath expression</param>
            <returns>Inner Text</returns>
        </member>
        <member name="P:Microsoft.Uii.Csr.Initialization.WindowsControlType">
            <summary>
            Get the hosted control type.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Initialization.UseToolBar">
            <summary>
            True if the web application toolbar is used, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Initialization.Arguments">
            <summary>
            Get the arguments of the external application.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Initialization.WorkingDirectory">
            <summary>
            Get the working directory of the external application.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Initialization.HostInsideCcfUI">
            <summary>
            True if external application is hosted inside of the UII UI, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Initialization.ShowMenu">
            <summary>
            True if external application menu is to be shown, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Initialization.UseOwnedWindow">
            <summary>
            True is application is developed using Microsoft Visual Basic 6.0 or older or older version of it, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Initialization.Url">
            <summary>
            Get the url of the hosted application.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Initialization.IsGlobal">
            <summary>
            True if the application is global, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Initialization.IsDependentOnWorkflow">
            <summary>
            True if the application is dependent on workflow, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Initialization.DisplayGroup">
            <summary>
            Get the display group of the hosted application.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Initialization.OptimunSize">
            <summary>
            Get the optimun size of the hosted application.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Initialization.MinimunSize">
            <summary>
            Get the minimun size of the hosted application.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Initialization.UseAdapter">
            <summary>
            True if the hosted application uses an adapter, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Initialization.AdapterURL">
            <summary>
            Get the URL of the adapter.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Initialization.AdapterType">
            <summary>
            Get the adapter type.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Initialization.IsIsolated">
            <summary>
            True if hosted application is isolated, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Initialization.HasContainer">
            <summary>
            Returns "yes" if has isolation container.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Initialization.ContainerType">
            <summary>
            Get the container type (i.e. appdomain or process).
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.LoginFieldNotFoundException">
            <summary>
            This is the Exception class thrown when a particular login field could not be located.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.LoginFieldNotFoundException.#ctor(System.String)">
            <summary>
            LoginFieldNotFoundException
            </summary>
            <param name="fieldName">Field name not found.</param>
        </member>
        <member name="P:Microsoft.Uii.Csr.LoginFieldNotFoundException.LoginFieldName">
            <summary>
            Gets the name of the login field which could not be located.
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.Core.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_HOST_ACTION_APPLICATION_NOT_FOUND">
            <summary>
              Looks up a localized string similar to The action &quot;{0}&quot; couldn&apos;t be fired because the target application &quot;{1}&quot; is unavailable or disabled..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_HOST_ACTION_NOT_FOUND">
            <summary>
              Looks up a localized string similar to The action &quot;{0}&quot; isn&apos;t configured on application &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_HOST_APPHOMEPAGEERROR">
            <summary>
              Looks up a localized string similar to The Home page couldn&apos;t be displayed for the hosted web application: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_HOST_APPLOADERROR">
            <summary>
              Looks up a localized string similar to The applications couldn&apos;t be loaded..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_HOST_APPRELOADERROR">
            <summary>
              Looks up a localized string similar to The applications for the new session couldn&apos;t be reloaded..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_HOST_APPRESETERROR">
            <summary>
              Looks up a localized string similar to The &quot;state data&quot; of the hosted applications couldn&apos;t be reset..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_HOST_ERR_APP_CREATE">
            <summary>
              Looks up a localized string similar to APPLICATION_HOST_ERR_APP_CREATE: The hosted application couldn&apos;t be created:.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_HOST_ERR_IN_DO_ACTION">
            <summary>
              Looks up a localized string similar to APPLICATION_HOST_ERR_IN_DO_ACTION: An error occurred while performing an action on the hosted application {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_HOST_ERR_IN_HANDLE_ISOLATED_FORM_SELECTED">
            <summary>
              Looks up a localized string similar to APPLICATION_HOST_ERR_IN_HANDLE_ISOLATED_FORM_SELECTED: Exception in HandleIsolatedFormSelected..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_HOST_ERR_LOADING_APPS">
            <summary>
              Looks up a localized string similar to APPLICATION_HOST_ERR_LOADING_APPS: The applications failed to load because the workflow isn&apos;t configured properly. Contact the system administrator..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_HOST_ERR_LOADING_DYNAMIC_APP_NO_SESSION_EXIST">
            <summary>
              Looks up a localized string similar to APPLICATION_HOST_ERR_LOADING_DYNAMIC_APP_NO_SESSION_EXIST: Unable to load the nonglobal dynamic application.  No session has started..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_HOST_ERR_LOGGING_INTERACTION">
            <summary>
              Looks up a localized string similar to APPLICATION_HOST_ERR_LOGGING_INTERACTION: An error occurred while logging interaction..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_HOST_ERR_NO_CONFIGURED_APPS">
            <summary>
              Looks up a localized string similar to APPLICATION_HOST_ERR_NO_CONFIGURED_APPS: No applications are configured for your use..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_HOST_ERR_ON_ACTION_COMPLETED">
            <summary>
              Looks up a localized string similar to APPLICATION_HOST_ERR_ON_ACTION_COMPLETED: The specified action failed to complete..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_HOST_ERR_ON_APP_CLOSE">
            <summary>
              Looks up a localized string similar to APPLICATION_HOST_ERR_ON_APP_CLOSE: An error occurred while closing the hosted application {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_HOST_ERR_ON_APP_INIT">
            <summary>
              Looks up a localized string similar to APPLICATION_HOST_ERR_ON_APP_INIT: Failed to initialize the hosted application {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_HOST_ERR_ON_CREATE_APPLICATION_STATE">
             <summary>
               Looks up a localized string similar to &quot;APPLICATION_HOST_ERR_ON_CREATE_APPLICATION_STATE: An error has occurred while creating the application state.
            
            This may be from an application not having a default action.&quot;.
             </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_HOST_ERR_ON_CREATE_CONTEXT">
            <summary>
              Looks up a localized string similar to APPLICATION_HOST_ERR_ON_CREATE_CONTEXT: An error occurred while creating context..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_HOST_ERR_ON_GET_APPLICATION_STATE">
            <summary>
              Looks up a localized string similar to APPLICATION_HOST_ERR_ON_GET_APPLICATION_STATE: An error occurred while getting the application state information..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_HOST_ERR_ON_GET_CONTEXT">
            <summary>
              Looks up a localized string similar to APPLICATION_HOST_ERR_ON_GET_CONTEXT: An error occurred while getting the context information..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_HOST_ERR_ON_NOTIFY_CONTEXT_CHANGE">
            <summary>
              Looks up a localized string similar to APPLICATION_HOST_ERR_ON_NOTIFY_CONTEXT_CHANGE:An error occurred while notifying context change to the hosted application {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_HOST_ERR_ON_SAVE_CONTEXT">
            <summary>
              Looks up a localized string similar to APPLICATION_HOST_ERR_ON_SAVE_CONTEXT: An error occurred while saving context through web service..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_HOST_ERR_UNABLE_TO_CLOSE_DYNAMIC_APP">
            <summary>
              Looks up a localized string similar to APPLICATION_HOST_ERR_UNABLE_TO_CLOSE_DYNAMIC_APP: This dynamic application hasn&apos;t been configured to be closed by the user..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_HOST_INVALIDSAVEDATAERROR">
            <summary>
              Looks up a localized string similar to APPLICATION_HOST_INVALIDSAVEDATAERROR: The saved data string is invalid for the hosted web application: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_HOST_MODULENAME">
            <summary>
              Looks up a localized string similar to Application Host.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_HOST_UNKNOWNAPPERROR">
            <summary>
              Looks up a localized string similar to The application type is unknown..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_HOST_UNKNOWNNAME">
            <summary>
              Looks up a localized string similar to -Unknown-.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_HOST_WORKITEM_ACTION_APP_NOT_FOUND">
            <summary>
              Looks up a localized string similar to APPLICATION_HOST_WORKITEM_ACTION_APP_NOT_FOUND: The action &quot;{0}&quot; couldn&apos;t be performed because the application &quot;{1}&quot; wasn&apos;t found..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.APPLICATION_MSG_SQL_EXIST">
            <summary>
              Looks up a localized string similar to The SQL Server doesn&apos;t exist..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.DESKTOP_APP_SAVE_ERROR">
            <summary>
              Looks up a localized string similar to The hosted application states couldn&apos;t be saved..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.DESKTOP_MODULE_NAME">
            <summary>
              Looks up a localized string similar to Agent Desktop.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.ExceptionWhileStarting">
            <summary>
              Looks up a localized string similar to {0}: An error occurred while starting the action: {1}: {2}.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.EXTERNAL_APP_ERR_COMPILATION">
            <summary>
              Looks up a localized string similar to There is a compilation error of severity {0} on line {1}: {2}.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.EXTERNAL_APP_ERR_COMPILE_OR_RUN_ERROR">
            <summary>
              Looks up a localized string similar to An error occurred while compiling or running the script {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.EXTERNAL_APP_ERR_DEFAULT_ACTION_NOT_DEFINED">
            <summary>
              Looks up a localized string similar to The default action isn&apos;t defined on the external application..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.EXTERNAL_APP_ERR_FILE_EXTN_NOT_SUPPORTED">
            <summary>
              Looks up a localized string similar to The file extension {0} isn&apos;t a supported script type..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.EXTERNAL_APP_ERR_WINDOWHANDLE_WAIT_TERMINATED">
            <summary>
              Looks up a localized string similar to The wait for MainWindowHandle to be created timed out..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.GlobalSessionNotStarted">
            <summary>
              Looks up a localized string similar to GlobalSessionNotStarted: You can&apos;t start a normal session (those associated to a customer) until a global session has started..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_APP_ADAPTER_LOAD_ERROR">
            <summary>
              Looks up a localized string similar to The adapter can&apos;t be loaded for application: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_APP_ERR_COMPILATION">
            <summary>
              Looks up a localized string similar to A compilation error of severity {0} occurred on line {1}: {2}.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_APP_ERR_COMPILING_RUNNING_SCRIPT">
            <summary>
              Looks up a localized string similar to An error occurred while compiling or running the script {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_APP_ERR_DEFAULT_ACTION_NOT_DEFINED">
            <summary>
              Looks up a localized string similar to A default action isn&apos;t defined on application: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_APP_ERR_FILE_XTN_NOT_SUPPORTED">
            <summary>
              Looks up a localized string similar to The file extension {0} isn&apos;t a supported script type..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_APP_ERR_GET_ICON">
            <summary>
              Looks up a localized string similar to The hosted application icon couldn&apos;t be read..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_APP_ERR_LOAD_SCRIPT">
            <summary>
              Looks up a localized string similar to HOSTED_APP_ERR_LOAD_SCRIPT: An error occurred while loading and executing the script..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_APP_INITSTRINGERROR">
            <summary>
              Looks up a localized string similar to The initialization string is invalid for the application: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_APP_MODULENAME">
            <summary>
              Looks up a localized string similar to Hosted Application.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_CONTROL_ERR_INITIALIZING">
            <summary>
              Looks up a localized string similar to HOSTED_CONTROL_ERR_INITIALIZING: An error occurred while initializing the hosted application: {0}.  Check the initialization string in the database..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_EXTERNAL_APP_ERR_AUTO_SIGN_ON">
            <summary>
              Looks up a localized string similar to HOSTED_EXTERNAL_APP_ERR_AUTO_SIGN_ON: The auto sign-on failed for the external application..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_EXTERNAL_APP_ERR_CREATE_INSTANCE">
            <summary>
              Looks up a localized string similar to HOSTED_EXTERNAL_APP_ERR_CREATE_INSTANCE : An error has occurred while creating an instance of the hosted external application..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_EXTERNAL_APP_ERR_LOAD_ACTION_INIT_DATA">
            <summary>
              Looks up a localized string similar to An error occurred while loading the hosted application action initialization data..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_EXTERNAL_APP_ERR_LOAD_INIT_DATA">
            <summary>
              Looks up a localized string similar to An error occurred while loading the hosted application&apos;s initialization data..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_EXTERNAL_APP_MODULENAME">
            <summary>
              Looks up a localized string similar to Hosted External Application.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_EXTERNAL_APP_SAVEDATAERROR">
            <summary>
              Looks up a localized string similar to Invalid application state data string..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_EXTERNAL_APP_SAVEERROR">
            <summary>
              Looks up a localized string similar to The state data was saved successfully..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_EXTERNAL_APP_UNABLE_TO_ACQUIRE">
            <summary>
              Looks up a localized string similar to The intended window of the hosted external application couldn&apos;t be acquired..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_WEB_APP_ACTION_NOT_DEFINED">
            <summary>
              Looks up a localized string similar to The default action isn&apos;t defined in the hosted web application: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_WEB_APP_ERR_APP_ALREADY_INITIALIZED">
            <summary>
              Looks up a localized string similar to Application: {0} already initialized..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_WEB_APP_ERR_AUTO_SIGN_ON">
            <summary>
              Looks up a localized string similar to HOSTED_WEB_APP_ERR_AUTO_SIGN_ON: The auto sign-on failed for the hosted web application:.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_WEB_APP_ERR_COMPILATION">
            <summary>
              Looks up a localized string similar to Compilation error of severity {0} on line {1}: {2}.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_WEB_APP_ERR_COMPILING_RUNNING_SCRIPT">
            <summary>
              Looks up a localized string similar to HOSTED_WEB_APP_ERR_COMPILING_RUNNING_SCRIPT: An error occurred while compiling or running the script {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_WEB_APP_ERR_EMPTY_SCRIPT_PATH">
            <summary>
              Looks up a localized string similar to Empty script path in initialization string for web action: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_WEB_APP_ERR_EMPTY_URL_IN_INIT">
            <summary>
              Looks up a localized string similar to Empty URL in initialization string for web action: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_WEB_APP_ERR_FILE_XTN_NOT_SUPPORTED">
            <summary>
              Looks up a localized string similar to The file extension {0} isn&apos;t a supported script type..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_WEB_APP_ERR_IE_CRASH">
             <summary>
               Looks up a localized string similar to &quot;The Internet Explorer process can&apos;t perform the requested operation for the hosted application {0}.
            Close all instances of Internet Explorer processes and restart the Agent Desktop.&quot;.
             </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_WEB_APP_ERR_INVALID_INIT_STRING_FOR_ACTION">
            <summary>
              Looks up a localized string similar to Invalid initialization string for web action: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_WEB_APP_ERR_INVALID_URL">
            <summary>
              Looks up a localized string similar to Invalid URL.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_WEB_APP_ERR_INVALID_VERB_IN_WEBACTION_INIT">
            <summary>
              Looks up a localized string similar to Invalid verb in the initialization string for web action: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_WEB_APP_ERR_MISSING_URL_NODE">
            <summary>
              Looks up a localized string similar to Missing URL node in initialization string for web action: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_WEB_APP_INITERROR">
            <summary>
              Looks up a localized string similar to initialization string.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_WEB_APP_MODULENAME">
            <summary>
              Looks up a localized string similar to Hosted Web Application.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_WEB_APP_NAVIGATIONERROR">
            <summary>
              Looks up a localized string similar to Failed to navigate to the new URL of the hosted web application: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_WEB_APP_SAVEDATAERROR">
            <summary>
              Looks up a localized string similar to Invalid application state data string..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_WEB_APP_SAVEERROR">
            <summary>
              Looks up a localized string similar to Saved data string.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_WEB_APP_UNINITIALIZEDERROR">
            <summary>
              Looks up a localized string similar to Application: {0} not initialized..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_WINDOWS_APP_ERR_AUTO_SIGN_ON">
            <summary>
              Looks up a localized string similar to HOSTED_WINDOWS_APP_ERR_AUTO_SIGN_ON: The auto sign-on failed for the hosted windows application..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_WINDOWS_APP_ERR_GET_ICON_LIST">
            <summary>
              Looks up a localized string similar to HOSTED_WINDOWS_APP_ERR_GET_ICON_LIST: The hosted application&apos;s icon list can&apos;t be read..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_WINDOWS_APP_SAVEDATAERROR">
            <summary>
              Looks up a localized string similar to Invalid application state data string..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTED_WINDOWS_APP_SAVEERROR">
            <summary>
              Looks up a localized string similar to Saved data string.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTEDAPPADAPTER_CALLBACK_FAILED_ERROR">
            <summary>
              Looks up a localized string similar to The call to the Agent desktop failed..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTEDAPPADAPTER_EVENT_FAILED_ERROR">
            <summary>
              Looks up a localized string similar to The hosted application event handler timed out..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTEDAPPADAPTER_MODULE_NAME">
            <summary>
              Looks up a localized string similar to Hosted Application Adapter.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTEDAPPADAPTER_UNLOAD_MESSAGE">
             <summary>
               Looks up a localized string similar to &quot;Could not communicate with Agent Desktop. Agent Desktop stopped responding.
            Application will exit.&quot;.
             </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTEDAPPFACTORY_APP_CREATION_TIMED_OUT">
            <summary>
              Looks up a localized string similar to HOSTEDAPPFACTORY_APP_CREATION_TIMED_OUT: The hosted application &quot;{0}&quot; couldn&apos;t be created. The process timed out. Contact your administrator..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTEDAPPFACTORY_MODULE_NAME">
            <summary>
              Looks up a localized string similar to Hosted Application Factory.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTEDAPPLAUNCHER_APPLICATION_CREATION_FAILED">
            <summary>
              Looks up a localized string similar to The hosted application &quot;{0}&quot; couldn&apos;t be created. Contact your administrator..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTEDAPPLAUNCHER_MODULE_NAME">
            <summary>
              Looks up a localized string similar to Hosted Application Launcher.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HostedAppProxy">
            <summary>
              Looks up a localized string similar to HostedAppProxy: PostToUIThread: ** no synchronization context **.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTEDAPPPROXY_CALL_FAILED_ERROR">
            <summary>
              Looks up a localized string similar to The remote method call failed on the isolated hosted application: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTEDAPPPROXY_CALLBACK_FAILED">
            <summary>
              Looks up a localized string similar to The remote method call failed on the isolated hosted application: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTEDAPPPROXY_HOSTEDAPP_NON_RESPONSIVE">
            <summary>
              Looks up a localized string similar to HOSTEDAPPPROXY_HOSTEDAPP_NON_RESPONSIVE: The hosted application is either not available or not responding..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTEDAPPPROXY_KILL_APPLICATION_FAILED">
            <summary>
              Looks up a localized string similar to The unresponsive isolated hosted application couldn&apos;t be closed..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.HOSTEDAPPPROXY_MODULE_NAME">
            <summary>
              Looks up a localized string similar to Hosted Application Proxy.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.LengthExceedsLimit">
            <summary>
              Looks up a localized string similar to LengthExceedsLimit: The length of the working directory path in the application initstring exceeds the system limit..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.LOGIN_FIELD_NOT_FOUND">
            <summary>
              Looks up a localized string similar to The login field couldn&apos;t be located:.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.LOGIN_WINDOW_NOT_FOUND">
            <summary>
              Looks up a localized string similar to The login window couldn&apos;t be located:.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.REGLISTENER_COULD_NOT_CREATE_PROXY">
            <summary>
              Looks up a localized string similar to The proxy couldn&apos;t be created for the application: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.REGLISTENER_MODULE_NAME">
            <summary>
              Looks up a localized string similar to Registration Listener.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.REGLISTENER_NO_CORRESPONDING_EVENT_EXISTS">
            <summary>
              Looks up a localized string similar to No corresponding event exists..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.REGLISTENER_NULL_ADAPTER_PASSED">
            <summary>
              Looks up a localized string similar to The adapter passed in is null..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.REGLISTENER_NULL_APPKEY_PASSED">
            <summary>
              Looks up a localized string similar to The application key passed in is null..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.REGLISTSENER_NULL_RESET_EVENT_PASSED">
            <summary>
              Looks up a localized string similar to Construction Completion Event passed is null..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.SESSION_ERR_CLOSE">
            <summary>
              Looks up a localized string similar to SESSION_ERR_CLOSE: An error occurred when closing the session..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.SESSION_ERR_SWITCH">
            <summary>
              Looks up a localized string similar to SESSION_ERR_SWITCH: Error switching sessions..
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Core.Resources.WorkingDirectoryNotFound">
            <summary>
              Looks up a localized string similar to WorkingDirectoryNotFound: The working directory in the application initstring can&apos;t be found.
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.SessionControllerEventArgs">
            <summary>
            Session controller event arguments class
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.SessionControllerEventArgs.SessionId">
            <summary>
            Session identifier
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.SessionControllerEventArgs.SessionName">
            <summary>
            Session name
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.SessionControllerEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.SessionControllerEventArgs.#ctor(System.Guid,System.String)">
            <summary>
            Primary constructor
            </summary>
            <param name="sessionId">Session identifier</param>
            <param name="sessionName">Session name</param>
        </member>
        <member name="T:Microsoft.Uii.Csr.SessionOpenControllerEventArgs">
            <summary>
            Open Session controller event arguments class
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.SessionOpenControllerEventArgs.ApplicationSessionId">
            <summary>
            Application session identifier
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.SessionOpenControllerEventArgs.OverrideSessionId">
            <summary>
            Flag to tell system whether to use the ApplicationSessionID as the session ID
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.SessionOpenControllerEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.SessionOpenControllerEventArgs.#ctor(System.Guid,System.String,System.Guid,System.Boolean)">
            <summary>
            Primary constructor
            </summary>
            <param name="sessionId">Session identifier</param>
            <param name="sessionName">Session name</param>
            <param name="applicationSessionId">Application session identifier</param>
            <param name="overrideSessionId">Flag to tell system whether to use the ApplicationSessionID as the session ID</param>
        </member>
        <member name="T:Microsoft.Uii.Csr.ISessionController">
            <summary>
            The session controlling interface for global hosted applications that want to
            control over the sessions.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.ISessionController.SessionOpen(System.Guid,System.Guid)">
            <summary>
            Called whenever the session is opened..  Only global applications
            receive this since 'local' applications don't need to know if their
            session is shown or not.
            </summary>
            <param name="sessionId">ID of the session being opened.</param>
            <param name="applicationSessionId">The initial application session ID.</param>
            <returns>A boolean indicating success or failure.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ISessionController.SessionClose(System.Guid)">
            <summary>
            Called whenever the session is closed..  Only global applications
            receive this since 'local' applications don't need to know if their
            session is shown or not.
            </summary>
            <param name="sessionId">ID of the session being closed.</param>
            <returns>A boolean indicating success or failure.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.ISessionController.SessionChange(System.Boolean,System.Guid)">
            <summary>
            Called whenever the session is changed.  Only global applications
            receive this since 'local' applications don't need to know if their
            session is shown or not.
            </summary>
            <param name="activate">true if the session is becoming active, false
            if another session is becoming active.</param>
            <param name="sessionId">ID of the session being affected</param>
            <remarks>Already exists in IHostedApplication but is here to cover all the variations.</remarks>
        </member>
        <member name="E:Microsoft.Uii.Csr.ISessionController.RequestSessionOpen">
            <summary>
            Occurs when an request to open a session is fired.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.ISessionController.RequestSessionClose">
            <summary>
            Occurs when an request to close a session is fired.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.ISessionController.RequestSessionChange">
            <summary>
            Occurs when an request to change a session is fired.
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.Session">
            <summary>
            This represents a single customer session within UII
            An enumeration over a session give a set of IHostedApplications.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Session.PresenceState">
            <summary>
            Gets or sets the setting for the Presense state for this session.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Session.IsWorkflowPending">
            <summary>
            Gets or sets if the workflow being used (pending).  Returns false if no
            workflow or if its done or cancelled.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Session.IsSessionIconSet">
            <summary>
            Gets or sets whether the icon for session line is set or not.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Session.FocusedApplication">
            <summary>
            Gets or sets the application in the session which currently has focus.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Session.StartTime">
            <summary>
            Get the start time of the the session.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Session.Workflow">
            <summary>
            Gets or sets the serialized state of the workflow for this session, kept in XML.
            Used whenever switching sessions to restore the workflow.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Session.Global">
            <summary>
            Gets a bool indicating if this is a global session, that is one that is not
            tied to a customer.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Session.RestoredSessionInfo">
            <summary>
            Implementation for Modified Workflow
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Session.CallId">
            <summary>
            Gets or sets the ID which identifies the call if there is one for this session.
            -1 if not.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Session.SessionId">
            <summary>
            Get the the unique ID for this session.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Session.AppHost">
            <summary>
            Get the list of applications and data for this session.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Session.Name">
            <summary>
            Gets or sets the name of the session.
            </summary>
            <remarks>
            The session name is usually the name of the customer.
            </remarks>
        </member>
        <member name="M:Microsoft.Uii.Csr.Session.#ctor(System.String,System.Int32)">
            <summary>
            Session constructor.
            </summary>
            <param name="name">The session name, usually the customer name.</param>
            <param name="callId">The call ID associated with the session, -1 if no call.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Session.#ctor(System.String,System.Int32,System.Guid)">
            <summary>
            Session constructor.
            </summary>
            <param name="name">The session name, usually the customer name.</param>
            <param name="callId">The call ID associated with the session, -1 if no call.</param>
            <param name="sessionId">Session ID to allow clients to specify the session ID explicitly.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Session.#ctor(System.String,System.Int32,System.Guid,System.Boolean)">
            <summary>
            Session constructor.
            </summary>
            <param name="name">The session name, usually the customer name.</param>
            <param name="callId">The call ID associated with the session, -1 if no call.</param>
            <param name="sessionId">Session ID to allow clients to specify the session ID explicitly.</param>
            <param name="useContextProxy">true to activate calls to the context web service to persist context changes</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Session.ToString">
            <summary>
            This method override the default ToString() method.
            </summary>
            <returns>The name of the session.</returns>
            <remarks>
            This is so combo boxes and other controls get the name of the session.
            </remarks>
        </member>
        <member name="M:Microsoft.Uii.Csr.Session.GetApplication(System.Guid)">
            <summary>
            Returns the requested application or null if none.
            </summary>
            <param name="appId"></param>
            <returns>An IHostedApplication reference or null</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.Session.ApplicationExists(System.Guid)">
            <summary>
            Returns whether an application exists in this session.
            </summary>
            <param name="appId">the application to look for</param>
            <returns>true if the app exists, false if not</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.Session.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection
            </summary>
            <returns>IEnumerator interface reference.</returns>
            <remarks>
            This is what is used for
            'foreach ( IHostedApplication app in session )'
            </remarks>
        </member>
        <member name="M:Microsoft.Uii.Csr.Session.GetCustomerID">
            <summary>
            This abstract method is used to return the customer ID.
            </summary>
            <returns>The customer ID the customer exists otherwise an empty string.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.Session.Save(System.Boolean)">
            <summary>
            Function to save the sessions state for a customer
            </summary>
            <param name="active">true if this session is active</param>
            <returns>An XML string or null if there are no applications</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.Session.Restore(System.String)">
            <summary>
            Restores the state of a session from the passed XML.
            </summary>
            <param name="sessionInfoXml"></param>
            <returns>true if this is an active session, false if not</returns> 
        </member>
        <member name="T:Microsoft.Uii.Csr.SessionShowHandler">
            <summary>
            Show session event delegate.
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.SessionHideHandler">
            <summary>
            Hide session event delegate.
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.SessionCloseHandler">
            <summary>
            Close session event delegate.
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.SessionOpenControllerEventHandler">
            <summary>
            Open Session controller Event delegate
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.SessionControllerEventHandler">
            <summary>
            Session controller Event delegate
            </summary>
        </member>
        <member name="T:Microsoft.Uii.Csr.Sessions">
            <summary>
            The Sessions class is an abstract class used to create and handle the individual Session classes.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.Sessions.SessionShowEvent">
            <summary>
            Event fired to show the session.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.Sessions.SessionHideEvent">
            <summary>
            Event fired to hide the session.
            </summary>
        </member>
        <member name="E:Microsoft.Uii.Csr.Sessions.SessionCloseEvent">
            <summary>
            Event fired to close the session.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.Sessions.#ctor(System.Boolean,System.Int32)">
            <summary>
            Constructor for sessions.
            </summary>
            <param name="useMultipleSessions">Boolean indicating if multiple sessions are allowed.</param>
            <param name="maxNumberOfSessions">Set the maximum number of sessions allowed.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Sessions.#ctor(System.Boolean)">
            <summary>
            Constructor for sessions.
            </summary>
            <param name="useMultipleSessions">Boolean indicating if multiple sessions are allowed.</param>
        </member>
        <member name="P:Microsoft.Uii.Csr.Sessions.Throttled">
            <summary>
            Gets whether the sessions have been throttled or not.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Sessions.ActiveSession">
            <summary>
            Returns the currently active session or null.
            </summary>
        </member>
        <member name="P:Microsoft.Uii.Csr.Sessions.GlobalSession">
            <summary>
            Returns the global session or null.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.Sessions.GetSession(System.Guid)">
            <summary>
            Get the session based on the sessionID.
            </summary>
            <param name="sessionId">The session ID for which to search.</param>
            <returns>A session or null if not found</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.Sessions.GetSession(System.String)">
            <summary>
            Get the session based on the customer ID.
            </summary>
            <param name="customerId">The customer ID for which to search.</param>
            <returns>A session or null if not found</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.Sessions.GetSession(System.Int32)">
            <summary>
            Get the session based on the callID.
            </summary>
            <param name="callId">The call ID for which to search.</param>
            <returns>A session or null if not found.</returns>
            <remarks>
            Do not return a session for -1 callID since that just means no call.
            </remarks>
        </member>
        <member name="M:Microsoft.Uii.Csr.Sessions.AddSession(System.String,System.Int32,System.Object,System.Guid)">
            <summary>
            Add a new session to the UII desktop
            </summary>
            <param name="name">the name for the session, usually the customer's name</param>
            <param name="callId">The call id, -1 if no call</param>
            <param name="customer">The customer object to attach to the session.</param>
            <param name="sessionId">Session ID to allow clients to specify the session ID explicitly.</param>
            <returns>The new session object.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.Sessions.AddSession(System.String,System.Int32,System.Object)">
            <summary>
            Add a new session to the UII desktop.
            </summary>
            <param name="name">the name for the session, usually the customer's name</param>
            <param name="callId">-1 if no call</param>
            <param name="customer">The customer object to attach to the session.</param>
            <returns>The new session object.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.Sessions.SetActiveSession(System.Guid)">
            <summary>
            Sets the session whose ID is given to be the active one and
            updates the UI as needed.
            </summary>
            <param name="sessionId">The session ID of the session to set active.</param>
        </member>
        <member name="M:Microsoft.Uii.Csr.Sessions.CloseAll">
            <summary>
            This method closes all sessions.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.Sessions.CloseSession(Microsoft.Uii.Csr.Session,System.Boolean)">
            <summary>
            Closes the session and if it was the activeSession, assigns another
            session to be the active one.
            </summary>
            <param name="session">Session object to close.</param>
            <param name="forceClose">Boolean indicating is the session should be force to close.</param>
            <returns>Boolean indicating success (true).</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.Sessions.Save">
            <summary>
            Returns XML giving the state of all existing sessions.
            </summary>
            <returns>XML string</returns>
        </member>
        <member name="P:Microsoft.Uii.Csr.Sessions.Count">
            <summary>
            The number of current sessions, not counting any global ones.
            </summary>
        </member>
        <member name="M:Microsoft.Uii.Csr.Sessions.GetEnumerator">
            <summary>
            This is what is used for 'foreach ( Session session in Sessions )'
            </summary>
            <returns>Enumerator for sessions</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.Sessions.CreateSession(System.String,System.Int32,System.Object)">
            <summary>
            Abstract method used to handle session creation.
            </summary>
            <param name="name">Session name, frequently the customer's name.</param>
            <param name="callId">The callID, if the session is started via a call.</param>
            <param name="customer">The customer object reference.</param>
            <returns>The session object created.</returns>
        </member>
        <member name="M:Microsoft.Uii.Csr.Sessions.CreateSession(System.String,System.Int32,System.Object,System.Guid)">
            <summary>
            Abstract method used to handle session creation.
            </summary>
            <param name="name">Session name, frequently the customer's name.</param>
            <param name="callId">The callID, if the session is started via a call.</param>
            <param name="customer">The customer object reference.</param>
            <param name="sessionId">Session ID to allow clients to specify the session ID explicitly.</param>
            <returns>The session object created.</returns>
        </member>
    </members>
</doc>
